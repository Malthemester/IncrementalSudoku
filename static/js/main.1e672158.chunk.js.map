{"version":3,"sources":["Components/sudoku.js","Components/numberInput.js","Components/solved.js","HelperFunctions/generatorSudoku.js","Components/header.js","App.js","index.js"],"names":["Sudoku","props","useState","board","SetBoard","rows","squ","colGroup","useEffect","i","squares","push","size","tds","j","onClick","callBack","value","className","RenderInputFild","radioGroup","type","id","name","checked","selectedNumber","onChange","htmlFor","RenderNInput","buttons","NumberInput","DesplaySolved","solved","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","length","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","fill","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","rowID","culumnID","includes","indexOf","curSquareY","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","RandomNewIndex","forEach","index","GetIndex","seleNumber","App","SetSelectedNumber","gameBoard","SetGameBoard","SetSolved","handleInput","e","key","document","addEventListener","removeEventListener","target","x","y","tempGameBoard","Number","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1e672158.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(<td key={`tdK${i}${j}`} onClick={\r\n\t\t\t\t\t() => props.callBack(i, j)}>\r\n\t\t\t\t\t{props.value[i][j]}\r\n\t\t\t\t</td>)\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","\r\n\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div>\r\n            {props.solved &&\r\n                <p>Win</p>\r\n            }\r\n        </div>\r\n    )\r\n}","function FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, board, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(board, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let numArry = FillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn}","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Idel Sudoku\r\n            </span>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport Sudoku from './Components/sudoku'\r\nimport NumberInput from './Components/numberInput'\r\nimport Solved from './Components/solved'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from './HelperFunctions/generatorSudoku'\r\nimport { react, useEffect, useState } from \"react\"\r\nimport Header from './Components/header'\r\n\r\nlet seleNumber = 1\r\n\r\nfunction App() {\r\n  const [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\r\n  const [size, SetSize] = useState(4)\r\n  const [squares, SetSquares] = useState(2)\r\n  const [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n\r\n  const [solved, SetSolved] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    SetSolved(CheckSukoku(size, gameBoard, squares))\r\n\r\n  }, [gameBoard])\r\n\r\n\r\n  useEffect(() => {\r\n    let newBoard = MakeSudoku(size, squares)\r\n    newBoard = RemoveNumbers(newBoard, 7)\r\n    SetGameBoard(newBoard)\r\n  }, [])\r\n\r\n  function handleClick(x, y) {\r\n\r\n    if (gameBoard == null) {\r\n      return\r\n    }\r\n\r\n    let tempGameBoard = [...gameBoard]\r\n    tempGameBoard[x][y] = Number(seleNumber)\r\n    SetGameBoard(tempGameBoard)\r\n  }\r\n\r\n  const handleNumberClick = (number) => {\r\n    seleNumber = number.target.value\r\n    SetSelectedNumber(number.target.value)\r\n  }\r\n\r\n  const newBoard = (newBoard) => {\r\n    SetGameBoard(newBoard)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const handleInput = (e) => {\r\n      if (e.key <= size && e.key != 0) {\r\n        SetSelectedNumber(e.key)\r\n        seleNumber = e.key\r\n      }\r\n    }\r\n    document.addEventListener(\"keydown\", handleInput);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleInput);\r\n    };\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      <div className=\"game\">\r\n        <NumberInput selectedNumber={selectedNumber} size={size} callBack={handleNumberClick} />\r\n\r\n        <div className=\"sudoku\">\r\n          <Sudoku\r\n            size={size}\r\n            squares={squares}\r\n            callBack={handleClick}\r\n            value={gameBoard}\r\n          ></Sudoku>\r\n        </div>\r\n\r\n        <Solved solved={solved}></Solved>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}