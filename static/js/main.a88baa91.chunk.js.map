{"version":3,"sources":["Components/sudoku.js","Components/numberInput.js","Components/complete.js","HelperFunctions/generatorSudoku.js","Components/header.js","Components/resources.js","HelperFunctions/saveValue.js","HelperFunctions/getResources.js","App.js","index.js"],"names":["Sudoku","props","useState","board","SetBoard","rows","squ","colGroup","bold","fontWeight","getFild","value","i","j","callBack","String","includes","style","replace","onClick","useEffect","squares","push","size","tds","className","RenderInputFild","radioGroup","type","id","name","checked","selectedNumber","onChange","htmlFor","RenderNInput","buttons","NumberInput","DesplaySolved","fillBar","SetFillBar","fill","backgroundColor","width","height","solved","collect","disabled","newGame","barFill","tempFill","clickBar","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","length","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","checkBoard","JSON","parse","stringify","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","rowID","culumnID","indexOf","curSquareY","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","RandomNewIndex","forEach","index","GetIndex","MarkOG","resourcesRow","valuePerSecond","DisplayResources","resources","x4","x4PM","x9","x9PM","SaveBoard","key","saveValue","localStorage","setItem","LoadResources","Number","getItem","CollectResources","curValue","SaveResources","seleNumber","App","resourcesDisplayObj","SetSelectedNumber","gameBoard","SetGameBoard","SetResources","SetSolved","NewGame","savedBoard","curBoard","lengthValue","split","splitValue","count","LocalToArray","tempResources","LoadAllResources","handleInput","e","document","addEventListener","removeEventListener","target","x","y","tempGameBoard","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a88baa91.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tconst bold = {\r\n\t\tfontWeight: 'bold',\r\n\t  }\r\n\r\n\tfunction getFild(value, i, j, callBack) {\r\n\r\n\t\tvalue = String(value)\r\n\r\n\t\tif ( value != null && value.includes(\"og\")) {\r\n\t\t\treturn (\r\n\t\t\t\t<td style={bold} key={`tdK${i}${j}`}>\r\n\t\t\t\t\t{value.replace('og', '')}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<td key={`tdK${i}${j}`} onClick={() => callBack(i, j)}>\r\n\t\t\t\t\t{value}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(getFild(props.value[i][j],i,j,props.callBack))\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","import { useState } from \"react\"\r\n\r\nexport default function DesplaySolved(props) {\r\n\r\n    const [fillBar, SetFillBar] = useState(0)\r\n\r\n    const fill = {\r\n        backgroundColor: \"crimson\",\r\n        width: `${fillBar}%`,\r\n        height: \"100%\"\r\n    }\r\n\r\n    function clickBar(barFill) {\r\n        let tempFill = fillBar + barFill\r\n\r\n        if (tempFill >= 100) {\r\n            SetFillBar(100)\r\n        }\r\n        else\r\n            SetFillBar(tempFill)\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttonList\">\r\n            {props.solved ?\r\n                <button className=\"button\" type=\"button\" onClick={() => props.collect(\"x4\", 1, props.size, props.squares)}>Complete</button> :\r\n                <button className=\"button\" type=\"button\" disabled>Incomplete</button>}\r\n\r\n            <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>New Sudoku</button>\r\n\r\n            <div id=\"Barfill\" onClick={() => clickBar(5)}>\r\n                <div style={fill} > </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","function FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    let checkBoard = JSON.parse(JSON.stringify(board))\r\n    \r\n    for (let i = 0; i < checkBoard.length; i++) {\r\n        for (let j = 0; j < checkBoard.length; j++) {\r\n            \r\n            if (String(checkBoard[i][j]).includes(\"og\")) {\r\n                checkBoard[i][j] = checkBoard[i][j].replace('og','')\r\n            }\r\n        }        \r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, checkBoard, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(checkBoard, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let numArry = FillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction MarkOG(board){\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board.length; j++) {\r\n            if (board[i][j].length > 0) {\r\n                board[i][j] = `${board[i][j]}og`\r\n            }\r\n        }        \r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    MarkOG(board)\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn}","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Idel Sudoku\r\n            </span>\r\n        </div>\r\n    )\r\n}","import \"../styles/resources.css\"\r\n\r\nfunction resourcesRow(value, name, valuePerSecond){\r\n\r\n    if(value < 0)\r\n        return\r\n\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{value}</td>\r\n            <td>{valuePerSecond}/m</td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default function DisplayResources(props){\r\n    \r\n    return (\r\n        <dis>\r\n            <table className=\"resource\">\r\n                <tbody>\r\n                    <th>Resources</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                    {resourcesRow(props.resources.x4,\"4x4\", props.resources.x4PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                </tbody>\r\n            </table>\r\n        </dis>\r\n    )\r\n}","function SaveBoard(board, key) {\r\n\r\n    let saveValue = `${board.length}::${board}`\r\n\r\n    localStorage.setItem(key, saveValue)\r\n}\r\n\r\nfunction SaveResources(key, value) {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nfunction LoadResources(key) {\r\n    return Number(localStorage.getItem(key))\r\n}\r\n\r\nfunction LocalToArray(value) {\r\n    let lengthValue = value.split('::')\r\n\r\n    if (lengthValue.length <= 1) {\r\n        return null\r\n    }\r\n\r\n    let length = lengthValue[0]\r\n\r\n    let splitValue = lengthValue[1].split(',')\r\n\r\n    let count = 0\r\n    let newBoard = []\r\n    for (let i = 0; i < length; i++) {\r\n        newBoard.push([])\r\n        for (let j = 0; j < length; j++) {\r\n            newBoard[i].push(String(splitValue[count]))\r\n            count++\r\n        }\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nexport { SaveBoard, LocalToArray, SaveResources, LoadResources }","import { SaveResources, LoadResources } from \"./saveValue\";\r\n\r\nfunction CollectResources(key, value){\r\n\r\n    let curValue = LoadResources(key)\r\n    curValue = curValue + value\r\n    SaveResources(key, curValue)\r\n    \r\n    return curValue\r\n}\r\n\r\n\r\nexport{CollectResources}","import './App.css';\r\nimport Sudoku from './Components/sudoku'\r\nimport NumberInput from './Components/numberInput'\r\nimport Solved from './Components/complete'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from './HelperFunctions/generatorSudoku'\r\nimport { useEffect, useState } from \"react\"\r\nimport Header from './Components/header'\r\nimport DisplayResources from './Components/resources'\r\nimport { SaveBoard, LocalToArray, LoadResources } from './HelperFunctions/saveValue'\r\nimport { CollectResources } from './HelperFunctions/getResources'\r\n\r\nlet seleNumber = 1\r\n\r\nfunction App() {\r\n\tlet remove = 7\r\n\tlet size = 4\r\n\tlet squares = 2\r\n\r\n\tconst resourcesObj = {\r\n\t\tx4: 0,\r\n\t\tx9: -1,\r\n\r\n\t\tx4PM: 0,\r\n\t\tx9PM: 0\r\n\t}\r\n\r\n\tconst resourcesDisplayObj = {\r\n\t\tx4: true,\r\n\t\tx9: false,\r\n\t}\r\n\r\n\tlet unSolvedBoard = []\r\n\r\n\tconst [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\tconst [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n\tconst [resources, SetResources] = useState(resourcesObj)\r\n\tconst [solved, SetSolved] = useState(false)\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [gameBoard])\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [resources])\r\n\r\n\r\n\tfunction NewGame(size, squares) {\r\n\t\tlet newBoard = MakeSudoku(size, squares)\r\n\t\tnewBoard = RemoveNumbers(newBoard, remove)\r\n\t\tunSolvedBoard = newBoard\r\n\t\tSetGameBoard(newBoard)\r\n\t\tSaveBoard(newBoard, \"curBoard\")\r\n\t}\r\n\r\n\tfunction LoadAllResources() {\r\n\t\tlet tempResources = resources\r\n\r\n\t\tif (resourcesDisplayObj.x4)\r\n\t\t\ttempResources.x4 = LoadResources(\"x4\")\r\n\r\n\t\tif (resourcesDisplayObj.x9)\r\n\t\t\ttempResources.x9 = LoadResources(\"x9\")\r\n\r\n\t\treturn tempResources\r\n\t}\r\n\r\n\tfunction collect(key, value, size, squares) {\r\n\r\n\t\tlet tempResources = resources\r\n\r\n\t\ttempResources[`${key}`] = CollectResources(key, value)\r\n\r\n\t\tSetResources(tempResources)\r\n\t\tNewGame(size, squares)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet savedBoard = localStorage.getItem(\"curBoard\")\r\n\t\tif (savedBoard != null) {\r\n\t\t\t\r\n\t\t\tlet curBoard = LocalToArray(savedBoard)\r\n\t\t\tSetGameBoard(curBoard)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNewGame(size, squares);\r\n\t\t}\r\n\r\n\t\tSetResources(LoadAllResources())\r\n\r\n\t}, [])\r\n\r\n\tfunction handleClick(x, y) {\r\n\t\tif (gameBoard == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[x][y] = String(seleNumber)\r\n\t\tSetGameBoard(tempGameBoard)\r\n\t\tSaveBoard(tempGameBoard, \"curBoard\")\r\n\r\n\t}\r\n\r\n\tconst handleNumberClick = (number) => {\r\n\t\tseleNumber = number.target.value\r\n\t\tSetSelectedNumber(number.target.value)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleInput = (e) => {\r\n\t\t\tif (e.key <= size && e.key != 0) {\r\n\t\t\t\tSetSelectedNumber(e.key)\r\n\t\t\t\tseleNumber = e.key\r\n\t\t\t}\r\n\t\t}\r\n\t\tdocument.addEventListener(\"keydown\", handleInput);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleInput);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header></Header>\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<DisplayResources resources={resources} ></DisplayResources>\r\n\t\t\t\t<NumberInput selectedNumber={selectedNumber} size={size} callBack={handleNumberClick} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"sudoku\" >\r\n\t\t\t\t\t\t<Sudoku\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tsquares={squares}\r\n\t\t\t\t\t\t\tcallBack={handleClick}\r\n\t\t\t\t\t\t\tvalue={gameBoard}\r\n\t\t\t\t\t\t></Sudoku>\r\n\t\t\t\t\t\t<Solved solved={solved} newGame={NewGame} squares={squares} size={size} collect={collect}></Solved>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}