{"version":3,"sources":["Components/sudoku.js","Components/numberInput.js","Components/solved.js","HelperFunctions/generatorSudoku.js","Components/header.js","Components/resources.js","HelperFunctions/saveValue.js","HelperFunctions/getResources.js","App.js","index.js"],"names":["Sudoku","props","useState","board","SetBoard","rows","squ","colGroup","useEffect","i","squares","push","size","tds","j","onClick","callBack","value","className","RenderInputFild","radioGroup","type","id","name","checked","selectedNumber","onChange","htmlFor","RenderNInput","buttons","NumberInput","DesplaySolved","fillBar","SetFillBar","fill","backgroundColor","width","height","solved","collect","disabled","newGame","barFill","tempFill","clickBar","style","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","length","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","rowID","culumnID","includes","indexOf","curSquareY","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","RandomNewIndex","forEach","index","GetIndex","resourcesRow","valuePerSecond","DisplayResources","console","log","resources","x4","x4PM","x9","x9PM","SaveBoard","key","saveValue","localStorage","setItem","LoadResources","Number","getItem","CollectResources","curValue","SaveResources","seleNumber","App","resourcesDisplayObj","SetSelectedNumber","gameBoard","SetGameBoard","SetResources","SetSolved","NewGame","savedBoard","curBoard","lengthValue","split","splitValue","count","LocalToArray","tempResources","LoadAllResources","handleInput","e","document","addEventListener","removeEventListener","target","x","y","tempGameBoard","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4a8409c3.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(<td key={`tdK${i}${j}`} onClick={\r\n\t\t\t\t\t() => props.callBack(i, j)}>\r\n\t\t\t\t\t{props.value[i][j]}\r\n\t\t\t\t</td>)\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","import { useState } from \"react\"\r\n\r\n\r\n\r\n\r\nexport default function DesplaySolved(props) {\r\n\r\n    const [fillBar, SetFillBar] = useState(0)\r\n\r\n    const fill = {\r\n        backgroundColor: \"crimson\",\r\n        width: `${fillBar}%`,\r\n        height: \"100%\"\r\n    }\r\n\r\n    function clickBar(barFill) {\r\n        let tempFill = fillBar + barFill\r\n\r\n        if (tempFill >= 100) {\r\n            return\r\n        }\r\n        else\r\n            SetFillBar(tempFill)\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttonList\">\r\n            {props.solved ?\r\n                <button className=\"button\" type=\"button\" onClick={() => props.collect(\"x4\", 1, props.size, props.squares)}>Complete</button> :\r\n                <button className=\"button\" type=\"button\" disabled>Incomplete</button>}\r\n\r\n            <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>New Sudoku</button>\r\n\r\n            <div id=\"Barfill\" onClick={() => clickBar(5)}>\r\n                <div style={fill} > </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","function FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, board, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(board, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let numArry = FillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn}","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Idel Sudoku\r\n            </span>\r\n        </div>\r\n    )\r\n}","import \"../styles/resources.css\"\r\n\r\nfunction resourcesRow(value, name, valuePerSecond){\r\n\r\n    if(value < 0)\r\n        return\r\n\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{value}</td>\r\n            <td>{valuePerSecond}/m</td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default function DisplayResources(props){\r\n    \r\nconsole.log(props.resources.x4)\r\n\r\n    return (\r\n        <dis>\r\n            <table className=\"resource\">\r\n                <tbody>\r\n                    <th>Resources</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                    {resourcesRow(props.resources.x4,\"4x4\", props.resources.x4PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                </tbody>\r\n            </table>\r\n        </dis>\r\n    )\r\n}","function SaveBoard(board, key){\r\n\r\n    let saveValue = `${board.length}::${board}`\r\n\r\n    localStorage.setItem(key,saveValue)\r\n}\r\n\r\nfunction SaveResources(key, value){\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nfunction LoadResources(key){\r\n    return Number(localStorage.getItem(key))\r\n}\r\n\r\nfunction LocalToArray(value)\r\n{\r\n    let lengthValue = value.split('::')\r\n\r\n    if (lengthValue.length <= 1) {\r\n        return null\r\n    }\r\n\r\n    let length = lengthValue[0]\r\n    \r\n    let splitValue = lengthValue[1].split(',')\r\n\r\n    let count = 0\r\n    let newBoard = []\r\n    for (let i = 0; i < length; i++) {\r\n        newBoard.push([])\r\n        for (let j = 0; j < length; j++) {\r\n            newBoard[i].push(splitValue[count])\r\n            count++\r\n        }\r\n    }\r\n    return newBoard\r\n}\r\n\r\nexport{SaveBoard, LocalToArray, SaveResources, LoadResources}","import { SaveResources, LoadResources } from \"./saveValue\";\r\n\r\nfunction CollectResources(key, value){\r\n\r\n    let curValue = LoadResources(key)\r\n    curValue = curValue + value\r\n    SaveResources(key, curValue)\r\n    \r\n    return curValue\r\n}\r\n\r\n\r\nexport{CollectResources}","import './App.css';\r\nimport Sudoku from './Components/sudoku'\r\nimport NumberInput from './Components/numberInput'\r\nimport Solved from './Components/solved'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from './HelperFunctions/generatorSudoku'\r\nimport { useEffect, useState } from \"react\"\r\nimport Header from './Components/header'\r\nimport DisplayResources from './Components/resources'\r\nimport { SaveBoard, LocalToArray, LoadResources } from './HelperFunctions/saveValue'\r\nimport { CollectResources } from './HelperFunctions/getResources'\r\n\r\n\r\nlet seleNumber = 1\r\nfunction App() {\r\n\tlet remove = 1\r\n\tlet size = 4\r\n\tlet squares = 2\r\n\r\n\tconst resourcesObj = {\r\n\t\tx4: 0,\r\n\t\tx9: -1,\r\n\r\n\t\tx4PM: 0,\r\n\t\tx9PM: 0\r\n\t}\r\n\r\n\tconst resourcesDisplayObj = {\r\n\t\tx4: true,\r\n\t\tx9: false,\r\n\t}\r\n\r\n\tconst [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\tconst [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n\tconst [resources, SetResources] = useState(resourcesObj)\r\n\tconst [solved, SetSolved] = useState(false)\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [gameBoard])\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [resources])\r\n\r\n\tfunction NewGame(size, squares) {\r\n\t\tlet newBoard = MakeSudoku(size, squares)\r\n\t\tnewBoard = RemoveNumbers(newBoard, remove)\r\n\t\tSetGameBoard(newBoard)\r\n\t\tSaveBoard(newBoard, \"curBoard\")\r\n\t}\r\n\r\n\tfunction LoadAllResources() {\r\n\t\tlet tempResources = resources\r\n\r\n\t\tif (resourcesDisplayObj.x4)\r\n\t\t\ttempResources.x4 = LoadResources(\"x4\")\r\n\r\n\t\tif (resourcesDisplayObj.x9)\r\n\t\t\ttempResources.x9 = LoadResources(\"x9\")\r\n\r\n\t\treturn tempResources\r\n\t}\r\n\r\n\tfunction collect(key, value, size, squares) {\r\n\r\n\t\tlet tempResources = resources\r\n\r\n\t\ttempResources[`${key}`] = CollectResources(key, value)\r\n\r\n\t\tSetResources(tempResources)\r\n\t\tNewGame(size, squares)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tlet savedBoard = localStorage.getItem(\"curBoard\")\r\n\t\tif (savedBoard != null) {\r\n\t\t\t\r\n\t\t\tlet curBoard = LocalToArray(savedBoard)\r\n\t\t\tSetGameBoard(curBoard)\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNewGame(size, squares);\r\n\t\t}\r\n\r\n\t\tSetResources(LoadAllResources())\r\n\r\n\t}, [])\r\n\r\n\tfunction handleClick(x, y) {\r\n\t\tif (gameBoard == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[x][y] = Number(seleNumber)\r\n\t\tSetGameBoard(tempGameBoard)\r\n\t\tSaveBoard(tempGameBoard, \"curBoard\")\r\n\r\n\t}\r\n\r\n\tconst handleNumberClick = (number) => {\r\n\t\tseleNumber = number.target.value\r\n\t\tSetSelectedNumber(number.target.value)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleInput = (e) => {\r\n\t\t\tif (e.key <= size && e.key != 0) {\r\n\t\t\t\tSetSelectedNumber(e.key)\r\n\t\t\t\tseleNumber = e.key\r\n\t\t\t}\r\n\t\t}\r\n\t\tdocument.addEventListener(\"keydown\", handleInput);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleInput);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header></Header>\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<DisplayResources resources={resources} ></DisplayResources>\r\n\t\t\t\t<NumberInput selectedNumber={selectedNumber} size={size} callBack={handleNumberClick} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"sudoku\" >\r\n\t\t\t\t\t\t<Sudoku\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tsquares={squares}\r\n\t\t\t\t\t\t\tcallBack={handleClick}\r\n\t\t\t\t\t\t\tvalue={gameBoard}\r\n\t\t\t\t\t\t></Sudoku>\r\n\t\t\t\t\t\t<Solved solved={solved} newGame={NewGame} squares={squares} size={size} collect={collect}></Solved>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}