{"version":3,"sources":["Components/sudoku.js","Components/numberInput.js","HelperFunctions/saveValue.js","HelperFunctions/solve.js","Components/complete.js","HelperFunctions/generatorSudoku.js","Components/header.js","Components/resources.js","App.js","HelperFunctions/getResources.js","index.js"],"names":["Sudoku","props","useState","board","SetBoard","rows","squ","colGroup","bold","fontWeight","getFild","value","i","j","callBack","String","includes","style","replace","onClick","useEffect","squares","push","size","tds","className","RenderInputFild","radioGroup","type","id","name","checked","selectedNumber","onChange","htmlFor","RenderNInput","buttons","NumberInput","SaveBoard","key","saveValue","length","localStorage","setItem","SaveResources","LoadResources","Number","getItem","SolveOne","solveList","split","trySolve","shift","DesplaySolved","fillBar","SetFillBar","fill","backgroundColor","width","height","solved","collect","disabled","newGame","barFill","tempFill","setboard","clickBar","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","checkBoard","JSON","parse","stringify","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","rowID","culumnID","indexOf","curSquareY","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","RandomNewIndex","forEach","index","GetIndex","MarkOG","resourcesRow","valuePerSecond","DisplayResources","resources","x4","x4PM","x9","x9PM","seleNumber","App","resourcesDisplayObj","SetSelectedNumber","gameBoard","SetGameBoard","SetResources","SetSolved","NewGame","savedBoard","curBoard","lengthValue","splitValue","count","LocalToArray","tempResources","LoadAllResources","handleInput","e","document","addEventListener","removeEventListener","target","x","y","tempGameBoard","curValue","CollectResources","solve","ReactDOM","render","StrictMode","getElementById"],"mappings":"sQAEe,SAASA,EAAOC,GAC9B,MAA0BC,qBAA1B,mBAAOC,EAAP,KAAcC,EAAd,KACIC,EAAO,GACPC,EAAM,GACNC,EAAW,GAETC,EAAO,CACZC,WAAY,QAGb,SAASC,EAAQC,EAAOC,EAAGC,EAAGC,GAI7B,OAAc,OAFdH,EAAQI,OAAOJ,KAEOA,EAAMK,SAAS,MAEnC,oBAAIC,MAAOT,EAAX,SACEG,EAAMO,QAAQ,KAAM,KADtB,aAA4BN,GAA5B,OAAgCC,IAMhC,oBAAwBM,QAAS,kBAAML,EAASF,EAAGC,IAAnD,SACEF,GADF,aAAeC,GAAf,OAAmBC,IAkCtB,OA5BAO,qBAAU,WACT,IAAK,IAAIR,EAAI,EAAGA,EAAIX,EAAMoB,QAAST,IAClCN,EAAIgB,KAAK,uBAAU,OAASV,IAG7B,IAAK,IAAIA,EAAI,EAAGA,EAAKX,EAAMsB,KAAOtB,EAAMoB,QAAUT,IACjDP,EAAKiB,KAAK,mCAA4BhB,GAAb,OAASM,IAKnC,IAFA,IAESA,EAAI,EAAGA,EAAIX,EAAMsB,KAAMX,IAAK,CAGpC,IAFA,IAAIY,EAAM,GAEDX,EAAI,EAAGA,EAAIZ,EAAMsB,KAAMV,IAC/BW,EAAIF,KAAKZ,EAAQT,EAAMU,MAAMC,GAAGC,GAAGD,EAAEC,EAAEZ,EAAMa,WAE9CP,EAASe,KAAK,6BAAqBE,GAAZ,MAAQZ,IAE3BA,EAAIX,EAAMoB,SAAWpB,EAAMoB,QAAU,IACxChB,EAAKiB,KAAK,gCAAuBf,GAAX,KAAOK,IAC7BL,EAAW,IAEZH,EAASC,MAGR,CAACJ,EAAMU,QAGT,uBAAOc,UAAU,cAAjB,SACEtB,IC5DJ,SAASuB,EAAgBzB,GACxB,IAAI0B,EAAa,GAgBjB,OAdAA,EAAWL,KACV,uBAECM,KAAM,QACNC,GAAI,MAAQ5B,EAAMU,MAClBmB,KAAM,cACNnB,MAAOV,EAAMU,MACboB,QAAS9B,EAAM+B,gBAAkB/B,EAAMU,MACvCsB,SAAUhC,EAAMa,UANX,QAAUb,EAAMU,QAUvBgB,EAAWL,KAAK,wBAAkCY,QAAS,MAAQjC,EAAMU,MAAzD,cAAkEV,EAAMU,MAAxE,MAAY,OAASV,EAAMU,QAEpCgB,EAGR,SAASQ,EAAalC,GAErB,IADA,IAAImC,EAAU,GACLxB,EAAI,EAAGA,EAAIX,EAAMsB,KAAMX,IAC/BwB,EAAQd,KAAK,cAACI,EAAD,CAAiBM,eAAgB/B,EAAM+B,eAAgBlB,SAAUb,EAAMa,SAAUH,MAAOC,EAAI,KAG1G,OAAO,sBAAKa,UAAU,gBAAf,cAAiCW,EAAjC,OAGO,SAASC,EAAYpC,GACnC,OACC,8BACC,cAACkC,EAAD,CAAcH,eAAgB/B,EAAM+B,eAAgBT,KAAMtB,EAAMsB,KAAMT,SAAUb,EAAMa,aChCzF,SAASwB,EAAUnC,EAAOoC,GAEtB,IAAIC,EAAS,UAAMrC,EAAMsC,OAAZ,aAAuBtC,GAEpCuC,aAAaC,QAAQJ,EAAKC,GAG9B,SAASI,EAAcL,EAAK5B,GACxB+B,aAAaC,QAAQJ,EAAK5B,GAG9B,SAASkC,EAAcN,GACnB,OAAOO,OAAOJ,aAAaK,QAAQR,ICVvC,SAASS,EAAS7C,GAEd,IDWkBoC,ECXdU,GDWcV,ECXW,eDYtBG,aAAaK,QAAQR,ICV5B,GAAgB,IAAbU,EAAH,CAGAA,EAAYA,EAAUC,MAAM,KAE5B,IAAK,IAAItC,EAAI,EAAGA,EAAIqC,EAAUR,OAAQ7B,IAAK,CACvC,IAAIuC,EAAWF,EAAU,GAAGC,MAAM,IAElC,GAAI/C,EAAMgD,EAAS,IAAIA,EAAS,KAAOA,EAAS,GAK5C,OAHAF,EAAUG,QACVR,EAAc,eAAgBK,GAEvBE,EAEXF,EAAUG,UClBH,SAASC,EAAcpD,GAElC,MAA8BC,mBAAS,GAAvC,mBAAOoD,EAAP,KAAgBC,EAAhB,KAEMC,EAAO,CACTC,gBAAiB,UACjBC,MAAM,GAAD,OAAKJ,EAAL,KACLK,OAAQ,QAcZ,OACI,sBAAKlC,UAAU,aAAf,UACKxB,EAAM2D,OACH,wBAAQnC,UAAU,SAASG,KAAK,SAAST,QAAS,kBAAMlB,EAAM4D,QAAQ,KAAM,EAAG5D,EAAMsB,KAAMtB,EAAMoB,UAAjG,sBACA,wBAAQI,UAAU,SAASG,KAAK,SAASkC,UAAQ,EAAjD,wBAEJ,wBAAQrC,UAAU,SAASG,KAAK,SAAST,QAAS,kBAAMlB,EAAM8D,QAAQ9D,EAAMsB,KAAMtB,EAAMoB,UAAxF,wBAEA,qBAAKQ,GAAG,UAAUV,QAAS,kBAnBnC,SAAkB6C,GACd,IAAIC,EAAWX,EAAUU,EAErBC,GAAY,KACZV,EAAW,GACXtD,EAAMiE,SAASlB,EAAS/C,EAAME,SAG9BoD,EAAWU,GAWsBE,CAAS,IAA1C,SACI,qBAAKlD,MAAOuC,EAAZ,oBC/BhB,SAASY,EAAU7C,GAEf,MADuB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1B8C,OAAO,EAAG9C,GAGpC,SAAS+C,EAAkBC,EAAYpE,EAAOoB,GAI1C,IAHA,IAAIiD,EAAWJ,EAAU7C,GACrBkD,EAAcL,EAAU7C,GAFoB,WAIvCX,GACL4D,EAAWA,EAASE,QAAO,SAAAC,GAAM,OAAIA,GAAUxE,EAAMoE,GAAY3D,MACjE6D,EAAcA,EAAYC,QAAO,SAAAC,GAAM,OAAIA,GAAUxE,EAAMS,GAAG2D,OAFzD3D,EAAI,EAAGA,EAAIW,EAAMX,IAAM,EAAvBA,GAKT,OAA0B,GAAnB4D,EAAS/B,QAAqC,GAAtBgC,EAAYhC,OAG/C,SAASmC,EAAYzE,EAAOoB,EAAMsD,EAAYC,EAASC,GAGnD,IAFA,IAAIC,EAAcZ,EAAU7C,GADgC,WAGnDX,GACL,IAJwD,eAI/CC,GACLmE,EAAcA,EAAYN,QAAO,SAAAC,GAAM,OAAIA,GAAUxE,EAAMS,EAAImE,GAASlE,EAAIiE,OADvEjE,EAAI,EAAGA,EAAIgE,EAAYhE,IAAM,EAA7BA,IADJD,EAAI,EAAGA,EAAIiE,EAAYjE,IAAM,EAA7BA,GAKT,OAA6B,GAAtBoE,EAAYvC,OAGvB,SAASwC,EAAY1D,EAAMpB,EAAOkB,GAG9B,IAFA,IAAI6D,EAAaC,KAAKC,MAAMD,KAAKE,UAAUlF,IAElCS,EAAI,EAAGA,EAAIsE,EAAWzC,OAAQ7B,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIqE,EAAWzC,OAAQ5B,IAE/BE,OAAOmE,EAAWtE,GAAGC,IAAIG,SAAS,QAClCkE,EAAWtE,GAAGC,GAAKqE,EAAWtE,GAAGC,GAAGK,QAAQ,KAAM,KAK9D,IAAK,IAAIN,EAAI,EAAGA,EAAIW,EAAMX,IACtB,IAAK0D,EAAkB1D,EAAGsE,EAAY3D,GAClC,OAAO,EAGf,IAAK,IAAIX,EAAI,EAAGA,EAAIS,EAAST,IACzB,IAAK,IAAIC,EAAI,EAAGA,EAAIQ,EAASR,IACzB,IAAK+D,EAAYM,EAAY3D,EAAMF,EAAST,EAAIS,EAASR,EAAIQ,GACzD,OAAO,EAInB,OAAO,EAGX,SAASiE,EAAW/D,EAAMgE,GAStB,IARA,IAKWC,EAAcC,EALrBC,EAAUtB,EAAU7C,GACpBoE,EAAWC,MAAMrE,GAAMiC,KAAK,MAAMqC,KAAI,kBAAMD,MAAMrE,GAAMiC,KAAKkC,MAC7DI,EAAY,CAAC,CAACC,KAAKC,MAAMD,KAAKE,SAAW1E,GAAOwE,KAAKC,MAAMD,KAAKE,SAAW1E,KAC3E2E,EAAc,GAIdC,GAAU,EACPA,GAEHL,EAAUM,MAAK,SAACC,EAAMC,GAAP,OAAgBD,EAAK5D,OAAS6D,EAAK7D,UAE1C,EACJqD,EAAUrD,OAAS,IAEfkD,EAASG,EAHT,GAG0B,IAAIA,EAH9B,GAG+C,IAAIrD,OAAS,IAE5DgD,EAAoBM,KAAKC,MAAMD,KAAKE,SAAWN,EAASG,EALxD,GAKyE,IAAIA,EAL7E,GAK8F,IAAIrD,QAClG+C,EAAeG,EAASG,EANxB,GAMyC,IAAIA,EAN7C,GAM8D,IAAIL,GAElEE,EAASG,EART,GAQ0B,IAAIA,EAR9B,GAQ+C,IAAM,CAACN,GACtDe,EAAiBT,EATjB,GASkC,GAAIA,EATtC,GASuD,GAAIH,EAAUpE,EAAMiE,EAAcD,EAAQW,EAAaJ,IAElHA,EAAUzB,OAXN,EAWoB,GACxB6B,EAAY7B,OAZR,EAYsB,IAI1ByB,EAAUrD,QAAU,IACpB0D,GAAU,GAIlB,OAAKlB,EAAY1D,EAAMoE,EAAUJ,GAI1BI,EAHIL,EAAW/D,EAAMgE,GAMhC,SAASgB,EAAiBC,EAAOC,EAAUd,EAAUpE,EAAMiE,EAAcX,EAAYqB,EAAaJ,GAE9F,IAAK,IAAIlF,EAAI,EAAGA,EAAIW,EAAMX,IAClB+E,EAASa,GAAO5F,GAAG6B,OAAS,IAC5BkD,EAASa,GAAO5F,GAAK+E,EAASa,GAAO5F,GAAG8D,QAAO,SAAAC,GAAM,OAAIA,GAAUa,KAE/DG,EAASa,GAAO5F,GAAG6B,QAAU,GAC7B8D,EAAiBC,EAAO5F,EAAG+E,EAAUpE,EAAMoE,EAASa,GAAO5F,GAAG,GAAIiE,EAAYqB,EAAaJ,GAEvFI,EAAYlF,SAAZ,UAAwBwF,GAAxB,OAAgC5F,MAChCkF,EAAUzB,OAAO6B,EAAYQ,QAAZ,UAAuBF,GAAvB,OAA+B5F,IAAM,GACtDsF,EAAY7B,OAAO6B,EAAYQ,QAAZ,UAAuBF,GAAvB,OAA+B5F,IAAM,KAGtDsF,EAAYlF,SAAZ,UAAwBwF,GAAxB,OAAgC5F,MACtCsF,EAAY5E,KAAZ,UAAoBkF,GAApB,OAA4B5F,IAC5BkF,EAAUxE,KAAK,CAACkF,EAAO5F,MAI3B+E,EAAS/E,GAAG6F,GAAUhE,OAAS,IAC/BkD,EAAS/E,GAAG6F,GAAYd,EAAS/E,GAAG6F,GAAU/B,QAAO,SAAAC,GAAM,OAAIA,GAAUa,KAErEG,EAAS/E,GAAG6F,GAAUhE,QAAU,GAChC8D,EAAiB3F,EAAG6F,EAAUd,EAAUpE,EAAMoE,EAAS/E,GAAG6F,GAAU,GAAI5B,EAAYqB,EAAaJ,GAE7FI,EAAYlF,SAAZ,UAAwBJ,GAAxB,OAA4B6F,MAC5BX,EAAUzB,OAAO6B,EAAYQ,QAAZ,UAAuB9F,GAAvB,OAA2B6F,IAAa,GACzDP,EAAY7B,OAAO6B,EAAYQ,QAAZ,UAAuB9F,GAAvB,OAA2B6F,IAAa,KAGzDP,EAAYlF,SAAZ,UAAwBJ,GAAxB,OAA4B6F,MAClCP,EAAY5E,KAAZ,UAAoBV,GAApB,OAAwB6F,IACxBX,EAAUxE,KAAK,CAACV,EAAG6F,MAQ/B,IAHA,IAAIE,EAAaZ,KAAKC,MAAMQ,EAAQ3B,GAAcA,EAC9C+B,EAAab,KAAKC,MAAMS,EAAW5B,GAAcA,EAE5CjE,EAAI,EAAGA,EAAIiE,EAAYjE,IAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAIgE,EAAYhE,IACxB8E,EAAS/E,EAAI+F,GAAY9F,EAAI+F,GAAYnE,OAAS,IAClDkD,EAAS/E,EAAI+F,GAAY9F,EAAI+F,GAAcjB,EAAS/E,EAAI+F,GAAY9F,EAAI+F,GAAYlC,QAAO,SAAAC,GAAM,OAAIA,GAAUa,KAE3GG,EAAS/E,EAAI+F,GAAY9F,EAAI+F,GAAYnE,QAAU,GACnD8D,EAAiB3F,EAAI+F,EAAY9F,EAAI+F,EAAYjB,EAAUpE,EAAMoE,EAAS/E,EAAI+F,GAAY9F,EAAI+F,GAAY,GAAI/B,EAAYqB,EAAaJ,GAEnII,EAAYlF,SAAZ,UAAwBJ,EAAI+F,GAA5B,OAAyC9F,EAAI+F,MAC7Cd,EAAUzB,OAAO6B,EAAYQ,QAAZ,UAAuB9F,EAAI+F,GAA3B,OAAwC9F,EAAI+F,IAAe,GAC5EV,EAAY7B,OAAO6B,EAAYQ,QAAZ,UAAuB9F,EAAI+F,GAA3B,OAAwC9F,EAAI+F,IAAe,KAG5EV,EAAYlF,SAAZ,UAAwBJ,EAAI+F,GAA5B,OAAyC9F,EAAI+F,MACnDV,EAAY5E,KAAZ,UAAoBV,EAAI+F,GAAxB,OAAqC9F,EAAI+F,IACzCd,EAAUxE,KAAK,CAACV,EAAI+F,EAAY9F,EAAI+F,MAkBxD,SAASC,EAAc1G,EAAO2G,GAE1B,IAAIvF,EAAOpB,EAAMsC,OACbsE,EAmBR,SAAwBxF,EAAMuF,GAI1B,IAHA,IAAIE,EAAa,GACbC,EAAc,GAETrG,EAAI,EAAGA,EAAIW,EAAOA,EAAMX,IAC7BoG,EAAW1F,KAAKV,GAGpBoG,EAAWZ,MAAK,kBAAOL,KAAKE,SAAW,GAAO,GAAK,KAEnD,IAAK,IAAIrF,EAAI,EAAGA,EAAIkG,EAAQlG,IACxBqG,EAAY3F,KAAK0F,EAAWpG,IAGhC,OAAOqG,EAjCWC,CAAe3F,EAAMuF,GAEnC7D,EAAY,GAchB,OAZA8D,EAAYI,SAAQ,SAAAC,GAChB,IAAIH,EA+BZ,SAAkB1F,EAAMoD,GAGpB,MAAO,CAFGoB,KAAKC,MAAMrB,EAASpD,GACjBoD,EAASpD,GAjCA8F,CAAS9F,EAAM6F,GAEjCnE,EAAU3B,KAAV,UAAkB2F,EAAY,IAA9B,OAAmCA,EAAY,IAA/C,OAAoD9G,EAAM8G,EAAY,IAAIA,EAAY,MAEtF9G,EAAM8G,EAAY,IAAIA,EAAY,IAAM,MAG5CrE,EAAc,eAAeK,GA1BjC,SAAgB9C,GAEZ,IAAK,IAAIS,EAAI,EAAGA,EAAIT,EAAMsC,OAAQ7B,IAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAMsC,OAAQ5B,IAC1BV,EAAMS,GAAGC,GAAG4B,OAAS,IACrBtC,EAAMS,GAAGC,GAAT,UAAiBV,EAAMS,GAAGC,GAA1B,OAuBZyG,CAAOnH,GAEAA,EC9LI,SAASkD,EAAcpD,GAClC,OACI,qBAAKwB,UAAU,SAAf,SACI,sBAAMA,UAAU,UAAhB,2B,MCFZ,SAAS8F,EAAa5G,EAAOmB,EAAM0F,GAE/B,KAAG7G,EAAQ,GAGX,OACI,+BACI,6BAAKmB,IACL,6BAAKnB,IACL,+BAAK6G,EAAL,WAMG,SAASC,EAAiBxH,GAErC,OACI,8BACI,uBAAOwB,UAAU,WAAjB,SACI,kCACI,2CACA,uBACA,uBACC8F,EAAatH,EAAMyH,UAAUC,GAAG,MAAO1H,EAAMyH,UAAUE,MACvDL,EAAatH,EAAMyH,UAAUG,GAAG,MAAM5H,EAAMyH,UAAUI,MACtDP,EAAatH,EAAMyH,UAAUG,GAAG,MAAM5H,EAAMyH,UAAUI,MACtDP,EAAatH,EAAMyH,UAAUG,GAAG,MAAM5H,EAAMyH,UAAUI,aClB3E,IAAIC,EAAa,EAyJFC,MAvJf,WACC,IAYMC,GACD,EADCA,GAED,EAKL,EAA4C/H,mBAAS6H,GAArD,mBAAO/F,EAAP,KAAuBkG,EAAvB,KACA,EAAkChI,mBAAS0F,MAnBhC,GAmB4CpC,KAAKoC,MAnBjD,GAmB6DpC,KAAK,QAA7E,mBAAO2E,EAAP,KAAkBC,EAAlB,KACA,EAAkClI,mBAjBb,CACpByH,GAAI,EACJE,IAAK,EAELD,KAAM,EACNE,KAAM,IAYP,mBAAOJ,EAAP,KAAkBW,EAAlB,KACA,EAA4BnI,oBAAS,GAArC,mBAAO0D,EAAP,KAAe0E,EAAf,KAWA,SAASC,EAAQhH,EAAMF,GACtB,IAAIsE,EAAWL,EAAW/D,EAAMF,GAChCsE,EAAWkB,EAAclB,EAnCb,GAoCIA,EAChByC,EAAazC,GACbrD,EAAUqD,EAAU,YAiFrB,OA/FAvE,qBAAU,WACTkH,EAAUrD,EAxBA,EAwBkBkD,EAvBf,MAwBX,CAACA,IAEJ/G,qBAAU,WACTkH,EAAUrD,EA5BA,EA4BkBkD,EA3Bf,MA4BX,CAACT,IAiCJtG,qBAAU,WACT,IAAIoH,EAAa9F,aAAaK,QAAQ,YACtC,GAAkB,MAAdyF,EAAoB,CAEvB,IAAIC,EN9DP,SAAsB9H,GAClB,IAAI+H,EAAc/H,EAAMuC,MAAM,MAE9B,GAAIwF,EAAYjG,QAAU,EACtB,OAAO,KASX,IANA,IAAIA,EAASiG,EAAY,GAErBC,EAAaD,EAAY,GAAGxF,MAAM,KAElC0F,EAAQ,EACRjD,EAAW,GACN/E,EAAI,EAAGA,EAAI6B,EAAQ7B,IAAK,CAC7B+E,EAASrE,KAAK,IACd,IAAK,IAAIT,EAAI,EAAGA,EAAI4B,EAAQ5B,IACxB8E,EAAS/E,GAAGU,KAAKP,OAAO4H,EAAWC,KACnCA,IAIR,OAAOjD,EMyCOkD,CAAaL,GAC5BJ,EAAaK,QAGbF,EAtES,EACG,GAwEbF,EAjCD,WACC,IAAIS,EAAgBpB,EAQpB,OANIO,IACHa,EAAcnB,GAAK9E,EAAc,OAE9BoF,IACHa,EAAcjB,GAAKhF,EAAc,OAE3BiG,EAwBMC,MAEX,IA4BH3H,qBAAU,WACT,IAAM4H,EAAc,SAACC,GAChBA,EAAE1G,KAzGG,GAyGqB,GAAT0G,EAAE1G,MACtB2F,EAAkBe,EAAE1G,KACpBwF,EAAakB,EAAE1G,MAKjB,OAFA2G,SAASC,iBAAiB,UAAWH,GAE9B,WACNE,SAASE,oBAAoB,UAAWJ,MAEvC,IAIF,gCACC,cAAC,EAAD,IACA,sBAAKvH,UAAU,OAAf,UACC,cAACgG,EAAD,CAAkBC,UAAWA,IAC7B,cAACrF,EAAD,CAAaL,eAAgBA,EAAgBT,KA3HrC,EA2HiDT,SAzBlC,SAAC6D,GAC1BoD,EAAapD,EAAO0E,OAAO1I,MAC3BuH,EAAkBvD,EAAO0E,OAAO1I,UAwB9B,8BACC,sBAAKc,UAAU,SAAf,UACC,cAACzB,EAAD,CACCuB,KA/HK,EAgILF,QA/HQ,EAgIRP,SApDN,SAAqBwI,EAAGC,GACvB,GAAiB,MAAbpB,EAAJ,CAGA,IAAIqB,EAAa,YAAOrB,GACxBqB,EAAcF,GAAGC,GAAKxI,OAAOgH,GAC7BK,EAAaoB,GACblH,EAAUkH,EAAe,cA8CpB7I,MAAOwH,IAER,cAAC,EAAD,CACCvE,OAAQA,EACRG,QAASwE,EACTlH,QAtIQ,EAuIRE,KAxIK,EAyILsC,QArFN,SAAiBtB,EAAK5B,EAAOY,EAAMF,GAElC,IAAIyH,EAAgBpB,EAEpBoB,EAAc,GAAD,OAAIvG,ICrEnB,SAA0BA,EAAK5B,GAE3B,IAAI8I,EAAW5G,EAAcN,GAI7B,OAFAK,EAAcL,EADdkH,GAAsB9I,GAGf8I,ED+DiBC,CAAiBnH,EAAK5B,GAEhD0H,EAAaS,GACbP,EAAQhH,EAAMF,IA+ET6C,SAnDN,SAAkByF,GAEjB,GAAa,MAATA,EAAJ,CAGA,IAAIH,EAAa,YAAOrB,GACxBqB,EAAcG,EAAM,IAAIA,EAAM,IAAM5I,OAAO4I,EAAM,IACjDvB,EAAaoB,GACblH,EAAUkH,EAAe,cA4CpBrJ,MAAOgI,gBErJdyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,W","file":"static/js/main.566a99b4.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tconst bold = {\r\n\t\tfontWeight: 'bold',\r\n\t  }\r\n\r\n\tfunction getFild(value, i, j, callBack) {\r\n\r\n\t\tvalue = String(value)\r\n\r\n\t\tif ( value != null && value.includes(\"og\")) {\r\n\t\t\treturn (\r\n\t\t\t\t<td style={bold} key={`tdK${i}${j}`}>\r\n\t\t\t\t\t{value.replace('og', '')}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<td key={`tdK${i}${j}`} onClick={() => callBack(i, j)}>\r\n\t\t\t\t\t{value}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(getFild(props.value[i][j],i,j,props.callBack))\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","function SaveBoard(board, key) {\r\n\r\n    let saveValue = `${board.length}::${board}`\r\n\r\n    localStorage.setItem(key, saveValue)\r\n}\r\n\r\nfunction SaveResources(key, value) {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nfunction LoadResources(key) {\r\n    return Number(localStorage.getItem(key))\r\n}\r\n\r\nfunction LoadSolution(key) {\r\n    return localStorage.getItem(key)\r\n}\r\n\r\nfunction LocalToArray(value) {\r\n    let lengthValue = value.split('::')\r\n\r\n    if (lengthValue.length <= 1) {\r\n        return null\r\n    }\r\n\r\n    let length = lengthValue[0]\r\n\r\n    let splitValue = lengthValue[1].split(',')\r\n\r\n    let count = 0\r\n    let newBoard = []\r\n    for (let i = 0; i < length; i++) {\r\n        newBoard.push([])\r\n        for (let j = 0; j < length; j++) {\r\n            newBoard[i].push(String(splitValue[count]))\r\n            count++\r\n        }\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nexport { SaveBoard, LocalToArray, SaveResources, LoadResources , LoadSolution}","import { LoadSolution, SaveResources } from \"./saveValue\"\r\n\r\nfunction SolveOne(board) {\r\n\r\n    let solveList = LoadSolution(\"curSolveList\")\r\n\r\n    if(solveList == \"\")\r\n        return\r\n\r\n    solveList = solveList.split(\",\")\r\n\r\n    for (let i = 0; i < solveList.length; i++) {\r\n        let trySolve = solveList[0].split(\"\")\r\n\r\n        if (board[trySolve[0]][trySolve[1]] != trySolve[2]) {\r\n\r\n            solveList.shift()\r\n            SaveResources(\"curSolveList\", solveList)\r\n            \r\n            return trySolve\r\n        }\r\n        solveList.shift()\r\n    }\r\n}\r\n\r\nexport{SolveOne}","import { useState } from \"react\"\r\nimport { SolveOne } from '../HelperFunctions/solve'\r\n\r\nexport default function DesplaySolved(props) {\r\n\r\n    const [fillBar, SetFillBar] = useState(0)\r\n\r\n    const fill = {\r\n        backgroundColor: \"crimson\",\r\n        width: `${fillBar}%`,\r\n        height: \"100%\"\r\n    }\r\n\r\n    function clickBar(barFill) {\r\n        let tempFill = fillBar + barFill\r\n\r\n        if (tempFill >= 100) {\r\n            SetFillBar(0)\r\n            props.setboard(SolveOne(props.board))\r\n        }\r\n        else\r\n            SetFillBar(tempFill)\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttonList\">\r\n            {props.solved ?\r\n                <button className=\"button\" type=\"button\" onClick={() => props.collect(\"x4\", 1, props.size, props.squares)}>Complete</button> :\r\n                <button className=\"button\" type=\"button\" disabled>Incomplete</button>}\r\n\r\n            <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>New Sudoku</button>\r\n\r\n            <div id=\"Barfill\" onClick={() => clickBar(5)}>\r\n                <div style={fill} > </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { SaveResources } from \"./saveValue\"\r\n\r\nfunction FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    let checkBoard = JSON.parse(JSON.stringify(board))\r\n\r\n    for (let i = 0; i < checkBoard.length; i++) {\r\n        for (let j = 0; j < checkBoard.length; j++) {\r\n\r\n            if (String(checkBoard[i][j]).includes(\"og\")) {\r\n                checkBoard[i][j] = checkBoard[i][j].replace('og', '')\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, checkBoard, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(checkBoard, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let numArry = FillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction MarkOG(board) {\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board.length; j++) {\r\n            if (board[i][j].length > 0) {\r\n                board[i][j] = `${board[i][j]}og`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    let solveList = []\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n\r\n        solveList.push(`${removeIndex[0]}${removeIndex[1]}${board[removeIndex[0]][removeIndex[1]]}`)\r\n\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    SaveResources(\"curSolveList\",solveList)\r\n\r\n    MarkOG(board)\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn }","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Idel Sudoku\r\n            </span>\r\n        </div>\r\n    )\r\n}","import \"../styles/resources.css\"\r\n\r\nfunction resourcesRow(value, name, valuePerSecond){\r\n\r\n    if(value < 0)\r\n        return\r\n\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{value}</td>\r\n            <td>{valuePerSecond}/m</td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default function DisplayResources(props){\r\n    \r\n    return (\r\n        <dis>\r\n            <table className=\"resource\">\r\n                <tbody>\r\n                    <th>Resources</th>\r\n                    <th></th>\r\n                    <th></th>\r\n                    {resourcesRow(props.resources.x4,\"4x4\", props.resources.x4PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                    {resourcesRow(props.resources.x9,\"9x9\",props.resources.x9PM)}\r\n                </tbody>\r\n            </table>\r\n        </dis>\r\n    )\r\n}","import './App.css';\r\nimport Sudoku from './Components/sudoku'\r\nimport NumberInput from './Components/numberInput'\r\nimport Complete from './Components/complete'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from './HelperFunctions/generatorSudoku'\r\nimport { useEffect, useState } from \"react\"\r\nimport Header from './Components/header'\r\nimport DisplayResources from './Components/resources'\r\nimport { SaveBoard, LocalToArray, LoadResources } from './HelperFunctions/saveValue'\r\nimport { CollectResources } from './HelperFunctions/getResources'\r\n\r\nlet seleNumber = 1\r\n\r\nfunction App() {\r\n\tlet remove = 8\r\n\tlet size = 4\r\n\tlet squares = 2\r\n\r\n\tconst resourcesObj = {\r\n\t\tx4: 0,\r\n\t\tx9: -1,\r\n\r\n\t\tx4PM: 0,\r\n\t\tx9PM: 0\r\n\t}\r\n\r\n\tconst resourcesDisplayObj = {\r\n\t\tx4: true,\r\n\t\tx9: false,\r\n\t}\r\n\r\n\tlet unSolvedBoard = []\r\n\r\n\tconst [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\tconst [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n\tconst [resources, SetResources] = useState(resourcesObj)\r\n\tconst [solved, SetSolved] = useState(false)\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [gameBoard])\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [resources])\r\n\r\n\r\n\tfunction NewGame(size, squares) {\r\n\t\tlet newBoard = MakeSudoku(size, squares)\r\n\t\tnewBoard = RemoveNumbers(newBoard, remove)\r\n\t\tunSolvedBoard = newBoard\r\n\t\tSetGameBoard(newBoard)\r\n\t\tSaveBoard(newBoard, \"curBoard\")\r\n\t}\r\n\r\n\tfunction LoadAllResources() {\r\n\t\tlet tempResources = resources\r\n\r\n\t\tif (resourcesDisplayObj.x4)\r\n\t\t\ttempResources.x4 = LoadResources(\"x4\")\r\n\r\n\t\tif (resourcesDisplayObj.x9)\r\n\t\t\ttempResources.x9 = LoadResources(\"x9\")\r\n\r\n\t\treturn tempResources\r\n\t}\r\n\r\n\tfunction collect(key, value, size, squares) {\r\n\r\n\t\tlet tempResources = resources\r\n\r\n\t\ttempResources[`${key}`] = CollectResources(key, value)\r\n\r\n\t\tSetResources(tempResources)\r\n\t\tNewGame(size, squares)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tlet savedBoard = localStorage.getItem(\"curBoard\")\r\n\t\tif (savedBoard != null) {\r\n\r\n\t\t\tlet curBoard = LocalToArray(savedBoard)\r\n\t\t\tSetGameBoard(curBoard)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNewGame(size, squares);\r\n\t\t}\r\n\r\n\t\tSetResources(LoadAllResources())\r\n\r\n\t}, [])\r\n\r\n\tfunction handleClick(x, y) {\r\n\t\tif (gameBoard == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[x][y] = String(seleNumber)\r\n\t\tSetGameBoard(tempGameBoard)\r\n\t\tSaveBoard(tempGameBoard, \"curBoard\")\r\n\t}\r\n\r\n\tfunction NewSolve(solve)\r\n\t{\r\n\t\tif (solve == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[solve[0]][solve[1]] = String(solve[2])\r\n\t\tSetGameBoard(tempGameBoard)\r\n\t\tSaveBoard(tempGameBoard, \"curBoard\")\r\n\t}\r\n\r\n\tconst handleNumberClick = (number) => {\r\n\t\tseleNumber = number.target.value\r\n\t\tSetSelectedNumber(number.target.value)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleInput = (e) => {\r\n\t\t\tif (e.key <= size && e.key != 0) {\r\n\t\t\t\tSetSelectedNumber(e.key)\r\n\t\t\t\tseleNumber = e.key\r\n\t\t\t}\r\n\t\t}\r\n\t\tdocument.addEventListener(\"keydown\", handleInput);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleInput);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header></Header>\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<DisplayResources resources={resources} ></DisplayResources>\r\n\t\t\t\t<NumberInput selectedNumber={selectedNumber} size={size} callBack={handleNumberClick} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"sudoku\" >\r\n\t\t\t\t\t\t<Sudoku\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tsquares={squares}\r\n\t\t\t\t\t\t\tcallBack={handleClick}\r\n\t\t\t\t\t\t\tvalue={gameBoard}\r\n\t\t\t\t\t\t></Sudoku>\r\n\t\t\t\t\t\t<Complete\r\n\t\t\t\t\t\t\tsolved={solved}\r\n\t\t\t\t\t\t\tnewGame={NewGame}\r\n\t\t\t\t\t\t\tsquares={squares}\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tcollect={collect}\r\n\t\t\t\t\t\t\tsetboard={NewSolve}\r\n\t\t\t\t\t\t\tboard={gameBoard}>\r\n\t\t\t\t\t\t</Complete>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default App;\r\n","import { SaveResources, LoadResources } from \"./saveValue\";\r\n\r\nfunction CollectResources(key, value){\r\n\r\n    let curValue = LoadResources(key)\r\n    curValue = curValue + value\r\n    SaveResources(key, curValue)\r\n    \r\n    return curValue\r\n}\r\n\r\n\r\nexport{CollectResources}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}