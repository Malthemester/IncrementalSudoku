{"version":3,"sources":["Components/numberInput.js","Components/sudoku.js","HelperFunctions/saveValue.js","HelperFunctions/solve.js","Components/complete.js","HelperFunctions/generatorSudoku.js","Components/shop.js","Components/board.js","HelperFunctions/getResources.js","Components/header.js","Components/resources.js","App.js","index.js"],"names":["RenderInputFild","props","radioGroup","push","type","id","value","name","checked","selectedNumber","onChange","callBack","htmlFor","RenderNInput","buttons","i","size","className","NumberInput","Sudoku","useState","board","SetBoard","rows","squ","colGroup","bold","fontWeight","cursor","getFild","j","String","includes","style","replace","onClick","gameBoard","setGameBoard","useEffect","squares","tds","SaveBoard","key","saveValue","length","localStorage","setItem","SaveResources","LoadResources","Number","getItem","SolveOne","solveList","split","trySolve","shift","DesplaySolved","fill","backgroundColor","width","fillbar","height","solved","collect","collectAmount","disabled","newGame","clickBar","clickAmount","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","checkBoard","JSON","parse","stringify","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","rowID","culumnID","indexOf","curSquareY","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","RandomNewIndex","forEach","index","GetIndex","MarkOG","Item","available","affordable","title","description","costs","startCosts","maxTimesPurchase","priors","priceFunc","incremenAmount","text1","text2","PriceFunc","ClickFun","IncremenAmount","PriceNumber","purchaseAmount","Id","Name","Costs","price","StartCosts","CostText","costText","IsAffordable","resources","find","resource","Value","Affordable","IsAvailable","ready","Priors","prior","DontUseId","Available","IsPurchase","MaxTimesPurchase","this","Title","Description","Text1","Text2","Shop","thisShopItems","items","shopItem","pruchaseFunc","pruchaseFuncs","undefined","Func","item","abs","toFixed","DynamicDescription","buyUint","Board","shopItemsTemp","startPrice","count","pow","log2","round","SetGameBoard","SetSolved","FillBar","SetFillBar","Amounts","SetAmounts","Actives","SetActives","Intervals","SetIntervals","NewGame","Purchase","keyName","max","tempMax","tempResources","resourceIndex","findIndex","setResources","barFill","tempFill","solve","tempGameBoard","NewSolve","shop","tempActives","tempIntervals","tempAmounts","GetIncrementels","savedBoard","curBoard","lengthValue","splitValue","LocalToArray","amount","active","interval","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","PurchaseFunc","func","cost","tempActive","curValue","CollectResources","handleClick","DisplayResources","valuePerSecond","display","resourcesRow","Interval","AmountPar","Display","seleNumber","App","paams","Resource","amountPar","currencys","SetResources","SetSelectedNumber","GobalsActives","SetGobalsActives","currency","gobalShopItemsTemp","handleInput","e","document","addEventListener","removeEventListener","x","y","new9x9","gobalShopItems","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b1214e7b.chunk.js","sourcesContent":["function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tconst bold = {\r\n\t\tfontWeight: 'bold',\r\n\t\tcursor: \"default\"\r\n\t  }\r\n\r\n\tfunction getFild(value, i, j, callBack) {\r\n\r\n\t\tvalue = String(value)\r\n\r\n\t\tif ( value != null && value.includes(\"og\")) {\r\n\t\t\treturn (\r\n\t\t\t\t<td style={bold} key={`tdK${i}${j}`}>\r\n\t\t\t\t\t{value.replace('og', '')}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<td key={`tdK${i}${j}`} onClick={() => callBack(i, j, props.gameBoard, props.setGameBoard, props.id)}>\r\n\t\t\t\t\t{value}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(getFild(props.value[i][j],i,j,props.callBack))\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function SaveBoard(board, key) {\r\n\r\n    let saveValue = `${board.length}::${board}`\r\n\r\n    localStorage.setItem(key, saveValue)\r\n}\r\n\r\nfunction SaveResources(key, value) {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nfunction LoadResources(key) {\r\n    return Number(localStorage.getItem(key))\r\n}\r\n\r\nfunction LoadSolution(key) {\r\n    return localStorage.getItem(key)\r\n}\r\n\r\nfunction LocalToArray(value) {\r\n    let lengthValue = value.split('::')\r\n\r\n    if (lengthValue.length <= 1) {\r\n        return null\r\n    }\r\n\r\n    let length = lengthValue[0]\r\n\r\n    let splitValue = lengthValue[1].split(',')\r\n\r\n    let count = 0\r\n    let newBoard = []\r\n    for (let i = 0; i < length; i++) {\r\n        newBoard.push([])\r\n        for (let j = 0; j < length; j++) {\r\n            newBoard[i].push(String(splitValue[count]))\r\n            count++\r\n        }\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nexport { SaveBoard, LocalToArray, SaveResources, LoadResources , LoadSolution}","import { LoadSolution, SaveResources } from \"./saveValue\"\r\n\r\nfunction SolveOne(board, id) {\r\n\r\n    let solveList = LoadSolution(id + \"curSolveList\")\r\n\r\n    if(solveList == \"\")\r\n        return\r\n\r\n    solveList = solveList.split(\",\")\r\n\r\n    for (let i = 0; i < solveList.length; i++) {\r\n        let trySolve = solveList[0].split(\"\")\r\n\r\n        if (board[trySolve[0]][trySolve[1]] != trySolve[2]) {\r\n\r\n            solveList.shift()\r\n            SaveResources(id + \"curSolveList\", solveList)\r\n            \r\n            return trySolve\r\n        }\r\n        solveList.shift()\r\n    }\r\n}\r\n\r\nexport{SolveOne}","import { SolveOne } from '../HelperFunctions/solve'\r\n\r\n\r\nexport default function DesplaySolved(props) {\r\n\r\n    const fill = {\r\n        backgroundColor: \"crimson\",\r\n        width: `${props.fillbar}%`,\r\n        height: \"100%\",\r\n        cursor: \"pointer\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttonList\">\r\n            {props.solved ?\r\n                <button className=\"button\" type=\"button\" onClick={() => props.collect(props.size + \"x\" + props.size, props.collectAmount, props.size, props.squares)}>Complete</button> :\r\n                <button className=\"button\" type=\"button\" disabled>Incomplete</button>}\r\n\r\n            <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>New Sudoku</button>\r\n\r\n            <div id=\"Barfill\" onClick={() => props.clickBar(props.clickAmount)}>\r\n                <div style={fill}> </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { SaveResources } from \"./saveValue\"\r\n\r\nfunction FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    let checkBoard = JSON.parse(JSON.stringify(board))\r\n\r\n    for (let i = 0; i < checkBoard.length; i++) {\r\n        for (let j = 0; j < checkBoard.length; j++) {\r\n\r\n            if (String(checkBoard[i][j]).includes(\"og\")) {\r\n                checkBoard[i][j] = checkBoard[i][j].replace('og', '')\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, checkBoard, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(checkBoard, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let numArry = FillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction MarkOG(board) {\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board.length; j++) {\r\n            if (board[i][j].length > 0) {\r\n                board[i][j] = `${board[i][j]}og`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove, id) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    let solveList = []\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n\r\n        solveList.push(`${removeIndex[0]}${removeIndex[1]}${board[removeIndex[0]][removeIndex[1]]}`)\r\n\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    SaveResources(id + \"curSolveList\",solveList)\r\n\r\n    MarkOG(board)\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn }","import { useState, useEffect } from \"react\"\r\nimport { LoadResources } from \"../HelperFunctions/saveValue\"\r\nimport \"../styles/shop.css\"\r\n// import {Purchase} from '../Components/complete'\r\n\r\nclass Item {\r\n    constructor(available, affordable, name, title, description, costs,\r\n        startCosts, maxTimesPurchase, priors, priceFunc, incremenAmount, text1, text2) {\r\n        this.Available = available\r\n        this.Affordable = affordable\r\n        this.Name = name\r\n        this.Title = title\r\n        this.Description = description\r\n        this.Costs = costs\r\n        this.StartCosts = startCosts\r\n        this.MaxTimesPurchase = maxTimesPurchase\r\n        this.Priors = priors\r\n        this.PriceFunc = priceFunc\r\n        this.IncremenAmount = incremenAmount\r\n        this.Text1 = text1\r\n        this.Text2 = text2\r\n    }\r\n\r\n    Id\r\n    Use\r\n\r\n    PriceFunc = () => { }\r\n    ClickFun = () => { }\r\n    IncremenAmount = () => { }\r\n\r\n    PriceNumber = () => {\r\n        let purchaseAmount = LoadResources(this.Id + this.Name)\r\n        this.Costs.forEach((price, index) => {\r\n            this.Costs[index] = [this.Costs[index][0], this.PriceFunc(this.StartCosts[index], purchaseAmount)]\r\n        })\r\n    }\r\n\r\n    CostText = () => {\r\n        let costText = []\r\n\r\n        this.Costs.forEach(price => {\r\n            costText.push(<span>{price[0]}: <span className=\"price\"> {price[1]}</span><br /></span>)\r\n        });\r\n        return costText\r\n    }\r\n\r\n    IsAffordable = (resources) => {\r\n        let affordable = true\r\n        this.Costs.forEach(price => {\r\n            if (resources.find(resource => resource.Name == price[0]).Value < price[1]) {\r\n                affordable = false\r\n            }\r\n        })\r\n        this.Affordable = affordable\r\n    }\r\n\r\n    IsAvailable = () => {\r\n\r\n        let ready = true\r\n\r\n        this.Priors.forEach((prior) => {\r\n            let key = this.DontUseId? prior : this.Id + prior\r\n            let tempPurchase = LoadResources(key)\r\n\r\n            if (tempPurchase <= 0) {\r\n                ready = false\r\n            }\r\n        })\r\n\r\n        if (ready)\r\n            this.Available = true\r\n\r\n    }\r\n\r\n    IsPurchase = () => {\r\n\r\n        let tempPurchase = LoadResources(this.Id + this.Name)\r\n\r\n        if (tempPurchase >= this.MaxTimesPurchase) {\r\n            this.Available = false\r\n        }\r\n    }\r\n}\r\n\r\nexport function shopItems(){\r\n    return [\r\n        new Item(true, false,\r\n            \"Clicker\",\r\n            \"Buy a clicker for the progress bar\",\r\n            \"It will click ones a second\",\r\n            [[\"4x4\", 1]], [1],\r\n            1, [\"\"],\r\n            () => 1,\r\n            () => true),\r\n    \r\n        new Item(false, false,\r\n            \"Clicker Speed\",\r\n            \"Upgrade the clickers speed\",\r\n            `The clicker vill click [] faster`,\r\n            [[\"4x4\", 3]], [3], 25,\r\n            [\"Clicker\"],\r\n            (startPrice, count) => Math.floor(startPrice + Math.pow(count, 1.48)),\r\n            (count) => 1000 - (Math.log2(count + 1) * 210),\r\n            \"The clicker vill click [\", \"]ms faster\"),\r\n    \r\n        new Item(false, false,\r\n            \"Clicker strength\",\r\n            \"Upgrade the clickers strength\",\r\n            \"It will click [] stronger\",\r\n            [[\"4x4\", 5]], [5], 20,\r\n            [\"Clicker\", \"Clicker Speed\"],\r\n            (startPrice, count) => Math.floor(startPrice + Math.pow(count, 1.51)),\r\n            (count) =>  1.13 + (Math.log2(count + 2.3) * 2.1) - 1,\r\n            \"Clicks vill click [\", \"] stronger\"),\r\n    \r\n        new Item(false, false,\r\n            \"Auto Completer\",\r\n            \"The sudoku vil now auto complete\",\r\n            \"\",\r\n            [[\"4x4\", 15], [\"9x9\", 1]], [15, 1], 1,\r\n            [\"Clicker\", \"Clicker Speed\"],\r\n            (startPrice) => startPrice,\r\n            () => true),\r\n    \r\n        new Item(false, false,\r\n            \"Increase 4x4\",\r\n            \"Increase Points from 4x4\",\r\n            \"It will increase the points gaind by []\",\r\n            [[\"4x4\", 50]], [50], 10,\r\n            [\"Clicker\", \"Clicker Speed\", \"Auto Complete\"],\r\n            (startPrice, count) => Math.round(50 + Math.pow((count * 30), (1.2))),\r\n            (count) => count + 1,\r\n            \"It will increase the points gaind by [\", \"]\"),\r\n    \r\n        // increasePointsOn9x9: false,\r\n    \r\n        // New4x4: false,\r\n        // New9x9: false\r\n    ]\r\n}  \r\n\r\nexport function gobalShopItems(){\r\n    \r\n    let new9x9 = new Item(false, false,\r\n        \"9x9 Sudoku\",\r\n        \"Buy a 9x9 sudoku\",\r\n        \"With this you can earn 9x9\",\r\n        [[\"4x4\", 50]], [50], 1, \r\n        [\"1#Clicker strength\"],\r\n        (startPrice) => startPrice,\r\n        () => true)\r\n\r\n    new9x9.DontUseId = true\r\n\r\n    return [new9x9]\r\n}\r\n\r\nfunction buyUint(item) {\r\n    if (!item.Available) {\r\n        return\r\n    }\r\n\r\n    return (\r\n        <button disabled={!item.Affordable} onClick={() => item.ClickFun(item.Costs, item.Name, item.MaxTimesPurchase, item.Id)} className=\"shopBT\" type=\"button\">{item.Name}\r\n            <div className=\"tooltiptext\">\r\n                <div className=\"description\">{item.Title}</div>\r\n                <div className=\"description\">{item.CostText()}</div>\r\n                <div className=\"description\">{item.Description}</div>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction DynamicDescription(item) {\r\n    let purchaseAmount = LoadResources(item.Id + item.Name)\r\n    let number = item.IncremenAmount(purchaseAmount + 1) - item.IncremenAmount(purchaseAmount)\r\n    number = Math.abs(number.toFixed(2))\r\n\r\n    return `${item.Text1}${number}${item.Text2}`\r\n}\r\n\r\nexport function Shop(props) {\r\n\r\n    let thisShopItems = props.items\r\n\r\n    const [Shop, SetShop] = useState(thisShopItems)\r\n\r\n    return (\r\n        <div className=\"shop\">\r\n            <div className=\"shopHeder\">\r\n                {props.name}\r\n            </div>\r\n\r\n            {Shop.map(shopItem => {\r\n\r\n                shopItem.Id = props.id\r\n\r\n                let pruchaseFunc = props.pruchaseFuncs.find(pruchaseFunc => pruchaseFunc.Name == shopItem.Name)\r\n                if (pruchaseFunc != undefined)\r\n                    shopItem.ClickFun = pruchaseFunc.Func\r\n\r\n                shopItem.IsAffordable(props.resources)\r\n                shopItem.PriceNumber()\r\n\r\n                shopItem.IsAvailable()\r\n                shopItem.IsPurchase()\r\n\r\n                if (shopItem.Text1)\r\n                    shopItem.Description = DynamicDescription(shopItem)\r\n\r\n                return buyUint(shopItem)\r\n            })}\r\n\r\n        </div>\r\n    )\r\n}","import Sudoku from './sudoku'\r\nimport Complete from './complete'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from '../HelperFunctions/generatorSudoku'\r\nimport { useEffect, useState, useRef } from \"react\"\r\nimport { SaveBoard, LocalToArray, LoadResources, SaveResources } from '../HelperFunctions/saveValue'\r\nimport { CollectResources } from '../HelperFunctions/getResources'\r\nimport { Shop, shopItems } from './shop'\r\nimport { SolveOne } from '../HelperFunctions/solve'\r\n\r\nexport function Board(props) {\r\n    let size = props.size\r\n    let squares = props.squares\r\n    let remove = props.remove\r\n    let resources = props.resources\r\n\r\n    let shopItemsTemp = shopItems()\r\n\r\n    const [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n    const [solved, SetSolved] = useState(false)\r\n    const [FillBar, SetFillBar] = useState(0)\r\n    const [Amounts, SetAmounts] = useState([3, 1])\r\n    const [Actives, SetActives] = useState([false, false])\r\n    const [Intervals, SetIntervals] = useState([1000])\r\n\r\n    useEffect(() => {\r\n        GetIncrementels()\r\n\r\n        let savedBoard = localStorage.getItem(props.id + \"curBoard\")\r\n        if (savedBoard != null) {\r\n\r\n            let curBoard = LocalToArray(savedBoard)\r\n            SetGameBoard(curBoard)\r\n        }\r\n        else {\r\n            NewGame(size, squares);\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        SetSolved(CheckSukoku(size, gameBoard, squares))\r\n    }, [gameBoard])\r\n\r\n    useInterval(clickBar, Amounts[0], Actives[0], Intervals[0])\r\n\r\n    useEffect(() => {\r\n        if (Actives[1] && solved)\r\n            collect(`${size}x${size}`, Amounts[1], size, squares)\r\n    }, [solved])\r\n\r\n    function GetIncrementels() {\r\n        let shop = shopItemsTemp\r\n        let tempActives = Actives\r\n        let tempIntervals = Intervals\r\n        let tempAmounts = Amounts\r\n\r\n        tempActives[0] = LoadResources(props.id + shop[0].Name) > 0\r\n        tempIntervals[0] = shop[1].IncremenAmount(LoadResources(props.id + shop[1].Name))\r\n        tempAmounts[0] = shop[2].IncremenAmount(LoadResources(props.id + shop[2].Name))\r\n        tempActives[1] = LoadResources(props.id + shop[3].Name) > 0\r\n        tempAmounts[1] = shop[4].IncremenAmount(LoadResources(props.id + shop[4].Name))\r\n\r\n        SetIntervals(tempIntervals)\r\n        SetActives(tempActives)\r\n        SetAmounts(tempAmounts)\r\n    }\r\n\r\n    function NewGame(size, squares) {\r\n        let newBoard = MakeSudoku(size, squares)\r\n        newBoard = RemoveNumbers(newBoard, remove, props.id)\r\n        SetGameBoard(newBoard)\r\n        SaveBoard(newBoard, props.id + `curBoard`)\r\n    }\r\n\r\n\r\n    function Purchase(costs, keyName, max) {\r\n        \r\n        let tempMax = LoadResources(keyName)\r\n        if (tempMax >= max) {\r\n            return\r\n        }\r\n        \r\n        SaveResources(keyName, tempMax + 1)\r\n        let tempResources = resources\r\n\r\n        costs.forEach(price => {\r\n            let resourceIndex = tempResources.findIndex(resource => resource.Name == price[0])\r\n            tempResources[resourceIndex].Value = tempResources[resourceIndex].Value - price[1]\r\n            SaveResources(price[0], tempResources[resourceIndex].Value)\r\n        })\r\n\r\n        props.setResources([...tempResources])\r\n    }\r\n\r\n    function PurchaseClicker(cost, keyName, max, id) {\r\n        Purchase(cost, id + keyName, max)\r\n        let tempActive = Actives\r\n        tempActive[0] = true\r\n        SetActives([...tempActive])\r\n    }\r\n\r\n    function PurchaseClickerSpeed(cost, keyName, max, id) {\r\n        Purchase(cost, id + keyName, max)\r\n        let purchaseAmount = LoadResources(props.id + keyName)\r\n\r\n        let tempIntervals = Intervals\r\n        tempIntervals[0] = shopItemsTemp[1].IncremenAmount(purchaseAmount)\r\n\r\n        SetIntervals([...tempIntervals])\r\n    }\r\n\r\n    function PurchaseClickerStrengh(cost, keyName, max, id) {\r\n        Purchase(cost, id + keyName, max)\r\n\r\n        let purchaseAmount = LoadResources(props.id + keyName)\r\n        let tempAmounts = Amounts\r\n        tempAmounts[0] = shopItemsTemp[2].IncremenAmount(purchaseAmount)\r\n        SetAmounts([...tempAmounts])\r\n    }\r\n\r\n    function PurchaseCompleter(cost, keyName, max, id) {\r\n        Purchase(cost, id + keyName, max)\r\n        let tempActive = Actives\r\n        tempActive[1] = true\r\n        SetActives([...tempActive])\r\n    }\r\n\r\n    function PurchaseIncrease4x4(cost, keyName, max) {\r\n        Purchase(cost, props.id + keyName, max)\r\n\r\n        let purchaseAmount = LoadResources(props.id + keyName)\r\n        let tempAmounts = Amounts\r\n        tempAmounts[1] = shopItemsTemp[4].IncremenAmount(purchaseAmount)\r\n        SetAmounts([...tempAmounts])\r\n    }\r\n\r\n    function clickBar(barFill) {\r\n        let tempFill = FillBar + barFill\r\n\r\n        if (tempFill >= 100) {\r\n            if (solved) {\r\n                SetFillBar(100)\r\n            }\r\n            else {\r\n                SetFillBar(0)\r\n                NewSolve(SolveOne(gameBoard, props.id))\r\n            }\r\n        }\r\n        else\r\n            SetFillBar(tempFill)\r\n    }\r\n\r\n    class PurchaseFunc {\r\n        constructor(name, func) {\r\n            this.Name = name\r\n            this.Func = func\r\n        }\r\n    }\r\n\r\n    let pruchaseFuncs = [\r\n        new PurchaseFunc(shopItemsTemp[0].Name, PurchaseClicker),\r\n        new PurchaseFunc(shopItemsTemp[1].Name, PurchaseClickerSpeed),\r\n        new PurchaseFunc(shopItemsTemp[2].Name, PurchaseClickerStrengh),\r\n        new PurchaseFunc(shopItemsTemp[3].Name, PurchaseCompleter),\r\n        new PurchaseFunc(shopItemsTemp[4].Name, PurchaseIncrease4x4)\r\n    ]\r\n\r\n    function collect(name, value, size, squares) {\r\n\r\n        let tempResources = resources\r\n\r\n        tempResources.find(resource => resource.Name == name).Value = CollectResources(name, value)\r\n\r\n        props.setResources([...tempResources])\r\n        NewGame(size, squares)\r\n    }\r\n\r\n\r\n\r\n    function NewSolve(solve) {\r\n        if (solve == null) {\r\n            return\r\n        }\r\n        let tempGameBoard = [...gameBoard]\r\n        tempGameBoard[solve[0]][solve[1]] = String(solve[2] + \"og\")\r\n        SetGameBoard(tempGameBoard)\r\n        SaveBoard(tempGameBoard, `${props.id}curBoard`)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"game\">\r\n                <div>\r\n                    <div className=\"sudoku\">\r\n                        <Sudoku\r\n                            size={size}\r\n                            squares={squares}\r\n                            callBack={props.handleClick}\r\n                            value={gameBoard}\r\n                            gameBoard={gameBoard}\r\n                            setGameBoard={SetGameBoard}\r\n                            id={props.id}\r\n                        ></Sudoku>\r\n                        <Complete\r\n                            solved={solved}\r\n                            newGame={NewGame}\r\n                            squares={squares}\r\n                            size={size}\r\n                            collect={collect}\r\n                            clickBar={clickBar}\r\n                            fillbar={FillBar}\r\n                            clickAmount={Amounts[0]}\r\n                            collectAmount={Amounts[1]}\r\n                        ></Complete>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Shop \r\n                        resources={resources} \r\n                        pruchaseFuncs={pruchaseFuncs} \r\n                        name={size + \"x\" + size} \r\n                        id={props.id} \r\n                        items={shopItemsTemp}\r\n                    ></Shop>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction useInterval(callBack, amount, active, interval) {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callBack;\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            function tick() {\r\n                savedCallback.current(amount);\r\n            }\r\n\r\n            let id = setInterval(tick, interval);\r\n            return () => clearInterval(id);\r\n        }\r\n    });\r\n}","import { SaveResources, LoadResources } from \"./saveValue\";\r\n\r\nfunction CollectResources(key, value){\r\n\r\n    let curValue = LoadResources(key)\r\n    curValue = curValue + value\r\n    SaveResources(key, curValue)\r\n    \r\n    return curValue\r\n}\r\n\r\n\r\nexport{CollectResources}","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Idel Sudoku\r\n            </span>\r\n        </div>\r\n    )\r\n}","import \"../styles/resources.css\"\r\n\r\nfunction resourcesRow(value, name, valuePerSecond, display) {\r\n\r\n    if (!display)\r\n        return\r\n\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{value}</td>\r\n            <td>{valuePerSecond}/m</td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default function DisplayResources(props) {\r\n\r\n    return (\r\n        <dis>\r\n            <table className=\"resource\">\r\n                <tbody>\r\n                    <th>Resources</th>\r\n                    <th></th>\r\n                    <th></th>\r\n\r\n                    {props.resources.map(resource => {\r\n                        return resourcesRow(resource.Value, resource.Name, (resource.Interval / 1000) * resource.AmountPar, resource.Display)\r\n                    })}\r\n\r\n                </tbody>\r\n            </table>\r\n        </dis>\r\n    )\r\n}","import './App.css';\r\nimport NumberInput from './Components/numberInput'\r\nimport { useEffect, useState, useRef } from \"react\"\r\nimport { Board } from \"./Components/board\"\r\nimport Header from './Components/header'\r\nimport DisplayResources from './Components/resources'\r\nimport { SaveBoard, LoadResources, SaveResources } from './HelperFunctions/saveValue'\r\nimport { Shop, gobalShopItems } from './Components/shop'\r\n\r\nlet seleNumber = 1\r\n\r\nexport default function App(paams) {\r\n\tclass Resource {\r\n\t\tName = \"name\"\r\n\t\tValue = 0\r\n\t\tInterval = 0\r\n\t\tAmountPar = 0\r\n\t\tDisplay = false\r\n\r\n\t\tconstructor(name, value, interval, amountPar, display) {\r\n\t\t\tthis.Name = name\r\n\t\t\tthis.Value = value\r\n\t\t\tthis.Interval = interval\r\n\t\t\tthis.AmountPar = amountPar\r\n\t\t\tthis.Display = display\r\n\t\t}\r\n\t}\r\n\r\n\tlet currencys =\r\n\t\t[\r\n\t\t\tnew Resource(\"4x4\", 0, 0, 0, true),\r\n\t\t\tnew Resource(\"9x9\", 0, 0, 0, true)\r\n\t\t]\r\n\r\n\tconst [resources, SetResources] = useState(currencys)\r\n\tconst [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\tconst [GobalsActives, SetGobalsActives] = useState([false])\r\n\r\n\tuseEffect(() => {\r\n\t\tSetResources([...LoadAllResources()])\r\n\t\tGetIncrementels()\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleInput = (e) => {\r\n\t\t\tif (e.key <= 9 && e.key != 0) {\r\n\t\t\t\tseleNumber = e.key\r\n\t\t\t\tSetSelectedNumber(e.key)\r\n\t\t\t}\r\n\t\t}\r\n\t\tdocument.addEventListener(\"keydown\", handleInput);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleInput);\r\n\t\t};\r\n\t}, []);\r\n\r\n\tfunction GetIncrementels() {\r\n\t\tlet tempActives = GobalsActives\r\n\r\n\t\ttempActives[0] = LoadResources(gobalShopItemsTemp[0].Name) > 0\r\n\r\n\t\tSetGobalsActives(tempActives)\r\n\t}\r\n\r\n\tfunction LoadAllResources() {\r\n\t\tcurrencys.map((currency, index, currencys) => {\r\n\t\t\tcurrencys[index].Value = LoadResources(currency.Name)\r\n\t\t})\r\n\r\n\t\treturn currencys\r\n\t}\r\n\r\n\tconst handleNumberClick = (number) => {\r\n\t\tseleNumber = number.target.value\r\n\t\tSetSelectedNumber(number.target.value)\r\n\t}\r\n\r\n\tfunction handleClick(x, y, gameBoard, SetGameBoard, id) {\r\n\t\tif (gameBoard == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[x][y] = String(seleNumber)\r\n\t\tSetGameBoard([...tempGameBoard])\r\n\t\tSaveBoard(tempGameBoard, id + \"curBoard\")\r\n\t}\r\n\r\n\tlet gobalShopItemsTemp = gobalShopItems()\r\n\r\n\tclass PurchaseFunc {\r\n\t\tconstructor(name, func) {\r\n\t\t\tthis.Name = name\r\n\t\t\tthis.Func = func\r\n\t\t}\r\n\t}\r\n\r\n\tlet pruchaseFuncs = [\r\n\t\tnew PurchaseFunc(gobalShopItemsTemp[0].Name, Purchase9x9),\r\n\t]\r\n\r\n\tfunction Purchase(costs, keyName, max) {\r\n\r\n\t\tlet tempMax = LoadResources(keyName)\r\n\t\tif (tempMax >= max) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tSaveResources(keyName, tempMax + 1)\r\n\t\tlet tempResources = resources\r\n\r\n\t\tcosts.forEach(price => {\r\n\t\t\tlet resourceIndex = tempResources.findIndex(resource => resource.Name == price[0])\r\n\t\t\ttempResources[resourceIndex].Value = tempResources[resourceIndex].Value - price[1]\r\n\t\t\tSaveResources(price[0], tempResources[resourceIndex].Value)\r\n\t\t})\r\n\r\n\t\tSetResources([...tempResources])\r\n\t}\r\n\r\n\tfunction Purchase9x9(costs, keyName, max, id) {\r\n\t\tPurchase(costs,id + keyName, max)\r\n\t\tlet tempActive = GobalsActives\r\n\t\ttempActive[0] = true\r\n\t\tSetGobalsActives([...tempActive])\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header></Header>\r\n\r\n\t\t\t<DisplayResources resources={resources} ></DisplayResources>\r\n\t\t\t<NumberInput selectedNumber={selectedNumber} size={9} callBack={handleNumberClick} />\r\n\r\n\t\t\t<div className=\"gameshop\">\r\n\r\n\t\t\t\t<div >\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\tid={\"1#\"}\r\n\t\t\t\t\t\tsize={4}\r\n\t\t\t\t\t\tsquares={2}\r\n\t\t\t\t\t\tremove={9}\r\n\t\t\t\t\t\tresources={resources}\r\n\t\t\t\t\t\tsetResources={SetResources}\r\n\t\t\t\t\t\thandleClick={handleClick}\r\n\t\t\t\t\t\tcurrencys={currencys}\r\n\t\t\t\t\t></Board>\r\n\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tGobalsActives[0] ?\r\n\t\t\t\t\t\t\t<Board\r\n\t\t\t\t\t\t\t\tid={\"2#\"}\r\n\t\t\t\t\t\t\t\tsize={9}\r\n\t\t\t\t\t\t\t\tsquares={3}\r\n\t\t\t\t\t\t\t\tremove={40}\r\n\t\t\t\t\t\t\t\tresources={resources}\r\n\t\t\t\t\t\t\t\tsetResources={SetResources}\r\n\t\t\t\t\t\t\t\thandleClick={handleClick}\r\n\t\t\t\t\t\t\t\tcurrencys={currencys}\r\n\t\t\t\t\t\t\t></Board>\r\n\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Shop\r\n\t\t\t\t\t\tresources={resources}\r\n\t\t\t\t\t\tpruchaseFuncs={pruchaseFuncs}\r\n\t\t\t\t\t\tname={\"Gobal Shop\"}\r\n\t\t\t\t\t\tid={\"0#\"}\r\n\t\t\t\t\t\titems={gobalShopItemsTemp}\r\n\t\t\t\t\t></Shop>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}