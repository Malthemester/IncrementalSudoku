{"version":3,"sources":["Components/sudoku.js","Components/numberInput.js","HelperFunctions/saveValue.js","HelperFunctions/solve.js","Components/complete.js","HelperFunctions/generatorSudoku.js","Components/header.js","Components/resources.js","Components/shop.js","App.js","HelperFunctions/getResources.js","index.js"],"names":["Sudoku","props","useState","board","SetBoard","rows","squ","colGroup","bold","fontWeight","getFild","value","i","j","callBack","String","includes","style","replace","onClick","useEffect","squares","push","size","tds","className","RenderInputFild","radioGroup","type","id","name","checked","selectedNumber","onChange","htmlFor","RenderNInput","buttons","NumberInput","SaveBoard","key","saveValue","length","localStorage","setItem","SaveResources","LoadResources","Number","getItem","SolveOne","solveList","split","trySolve","shift","DesplaySolved","fill","backgroundColor","width","fillbar","height","solved","collect","disabled","newGame","clickBar","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","checkBoard","JSON","parse","stringify","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","rowID","culumnID","indexOf","curSquareY","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","RandomNewIndex","forEach","index","GetIndex","MarkOG","DisplayResources","resources","resource","valuePerSecond","display","resourcesRow","Value","Name","Interval","AmountPar","Display","item","available","affordable","title","description","costs","ClickFun","CostText","costText","Costs","price","this","Available","Affordable","Title","Description","shopItems","Shop","shopItem","pruchaseFunc","pruchaseFuncs","find","undefined","Func","buyUint","seleNumber","App","Resource","interval","amountPar","currencys","Incrementel","amount","active","Amount","CallBack","Active","incrementelsArr","console","log","SetSelectedNumber","gameBoard","SetGameBoard","SetResources","SetSolved","FillBar","SetFillBar","SetActive","NewGame","clicker","temtActive","GetIncrementels","savedBoard","curBoard","lengthValue","splitValue","count","LocalToArray","currency","incrementel1","barFill","tempFill","solve","tempGameBoard","NewSolve","inc","savedCallback","useRef","current","tick","setInterval","clearInterval","useInterval","func","handleInput","e","document","addEventListener","removeEventListener","target","x","y","tempResources","curValue","CollectResources","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.178c6579.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tconst bold = {\r\n\t\tfontWeight: 'bold',\r\n\t  }\r\n\r\n\tfunction getFild(value, i, j, callBack) {\r\n\r\n\t\tvalue = String(value)\r\n\r\n\t\tif ( value != null && value.includes(\"og\")) {\r\n\t\t\treturn (\r\n\t\t\t\t<td style={bold} key={`tdK${i}${j}`}>\r\n\t\t\t\t\t{value.replace('og', '')}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<td key={`tdK${i}${j}`} onClick={() => callBack(i, j)}>\r\n\t\t\t\t\t{value}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(getFild(props.value[i][j],i,j,props.callBack))\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","function SaveBoard(board, key) {\r\n\r\n    let saveValue = `${board.length}::${board}`\r\n\r\n    localStorage.setItem(key, saveValue)\r\n}\r\n\r\nfunction SaveResources(key, value) {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nfunction LoadResources(key) {\r\n    return Number(localStorage.getItem(key))\r\n}\r\n\r\nfunction LoadSolution(key) {\r\n    return localStorage.getItem(key)\r\n}\r\n\r\nfunction LocalToArray(value) {\r\n    let lengthValue = value.split('::')\r\n\r\n    if (lengthValue.length <= 1) {\r\n        return null\r\n    }\r\n\r\n    let length = lengthValue[0]\r\n\r\n    let splitValue = lengthValue[1].split(',')\r\n\r\n    let count = 0\r\n    let newBoard = []\r\n    for (let i = 0; i < length; i++) {\r\n        newBoard.push([])\r\n        for (let j = 0; j < length; j++) {\r\n            newBoard[i].push(String(splitValue[count]))\r\n            count++\r\n        }\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nexport { SaveBoard, LocalToArray, SaveResources, LoadResources , LoadSolution}","import { LoadSolution, SaveResources } from \"./saveValue\"\r\n\r\nfunction SolveOne(board) {\r\n\r\n    let solveList = LoadSolution(\"curSolveList\")\r\n\r\n    if(solveList == \"\")\r\n        return\r\n\r\n    solveList = solveList.split(\",\")\r\n\r\n    for (let i = 0; i < solveList.length; i++) {\r\n        let trySolve = solveList[0].split(\"\")\r\n\r\n        if (board[trySolve[0]][trySolve[1]] != trySolve[2]) {\r\n\r\n            solveList.shift()\r\n            SaveResources(\"curSolveList\", solveList)\r\n            \r\n            return trySolve\r\n        }\r\n        solveList.shift()\r\n    }\r\n}\r\n\r\nexport{SolveOne}","import { SolveOne } from '../HelperFunctions/solve'\r\n\r\n\r\nexport default function DesplaySolved(props) {\r\n\r\n    const fill = {\r\n        backgroundColor: \"crimson\",\r\n        width: `${props.fillbar}%`,\r\n        height: \"100%\"\r\n    }\r\n\r\n\r\n    function clickBar(barFill, solved) {\r\n        let tempFill = props.fillbar + barFill\r\n\r\n        if (tempFill >= 100) {\r\n            if (solved) {\r\n                props.setFillBar(100)\r\n            }\r\n            else{\r\n                props.setFillBar(0)\r\n                props.setboard(SolveOne(props.board))\r\n            }\r\n        }\r\n        else\r\n            props.setFillBar(tempFill)\r\n    }\r\n\r\n    return (\r\n        <div className=\"buttonList\">\r\n            {props.solved ?\r\n                <button className=\"button\" type=\"button\" onClick={() => props.collect(\"4x4\", 1, props.size, props.squares)}>Complete</button> :\r\n                <button className=\"button\" type=\"button\" disabled>Incomplete</button>}\r\n\r\n            <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>New Sudoku</button>\r\n\r\n            <div id=\"Barfill\" onClick={() => props.clickBar(5)}>\r\n                <div style={fill} > </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { SaveResources } from \"./saveValue\"\r\n\r\nfunction FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    let checkBoard = JSON.parse(JSON.stringify(board))\r\n\r\n    for (let i = 0; i < checkBoard.length; i++) {\r\n        for (let j = 0; j < checkBoard.length; j++) {\r\n\r\n            if (String(checkBoard[i][j]).includes(\"og\")) {\r\n                checkBoard[i][j] = checkBoard[i][j].replace('og', '')\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, checkBoard, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(checkBoard, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let numArry = FillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction MarkOG(board) {\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board.length; j++) {\r\n            if (board[i][j].length > 0) {\r\n                board[i][j] = `${board[i][j]}og`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    let solveList = []\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n\r\n        solveList.push(`${removeIndex[0]}${removeIndex[1]}${board[removeIndex[0]][removeIndex[1]]}`)\r\n\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    SaveResources(\"curSolveList\",solveList)\r\n\r\n    MarkOG(board)\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn }","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Idel Sudoku\r\n            </span>\r\n        </div>\r\n    )\r\n}","import \"../styles/resources.css\"\r\n\r\nfunction resourcesRow(value, name, valuePerSecond, display){\r\n\r\n    if(!display)\r\n        return\r\n\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{value}</td>\r\n            <td>{valuePerSecond}/m</td>\r\n        </tr>\r\n    )\r\n\r\n}\r\n\r\nexport default function DisplayResources(props){\r\n    \r\n    return (\r\n        <dis>\r\n            <table className=\"resource\">\r\n                <tbody>\r\n                    <th>Resources</th>\r\n                    <th></th>\r\n                    <th></th>\r\n\r\n                    {props.resources.map(resource => {\r\n                       return resourcesRow(resource.Value,resource.Name, (resource.Interval/1000) * resource.AmountPar, resource.Display)\r\n                    })}\r\n\r\n                </tbody>\r\n            </table>\r\n        </dis>\r\n    )\r\n}","import { useState, useEffect } from \"react\"\r\nimport \"../styles/shop.css\"\r\n// import {Purchase} from '../Components/complete'\r\n\r\nclass item {\r\n    constructor(available, affordable, name, title, description, costs) {\r\n        this.Available = available\r\n        this.Affordable = affordable\r\n        this.Name = name\r\n        this.Title = title\r\n        this.Description = description\r\n        this.Costs = costs\r\n    }\r\n\r\n    ClickFun = () => { }\r\n\r\n    CostText = () => {\r\n        let costText = []\r\n\r\n        this.Costs.forEach(price => {\r\n            costText.push(<span>{price[0]}: <span className=\"price\"> {price[1]}</span><br /></span>)\r\n        });\r\n        return costText\r\n    }\r\n}\r\n\r\nconst shopItems = [\r\n    new item(true, false,\r\n        \"Clicker\",\r\n        \"Buy a clicker for the progress bar\",\r\n        \"It will click ones a second\",\r\n        [[\"4x4\", 2]]),\r\n    // ClickFun = Purchase,\r\n\r\n    new item(true, true,\r\n        \"Clicker Speed\",\r\n        \"Upgrade the clickers speed\",\r\n        \"It will click faster\",\r\n        [[\"4x4\", 3], [\"9x9\", 1]]),\r\n\r\n    new item(false, false,\r\n        \"Clicker sterngth\",\r\n        \"Upgrade the clickers sterngth\",\r\n        \"It will click stronger\",\r\n        [[\"4x4\", 3]])\r\n\r\n    // clicker_speed: false,\r\n    // clicker_strength: false,\r\n\r\n    // increasePointsOn4x4: false,\r\n    // increasePointsOn9x9: false,\r\n\r\n    // simpleAI: false,\r\n    // simpleAI_amount: false,\r\n    // simpleAI_speed: false,\r\n\r\n    // New4x4: false,\r\n    // New9x9: false\r\n    // Auto complet\r\n]\r\n\r\nfunction buyUint(item) {\r\n    if (!item.Available) {\r\n        return\r\n    }\r\n\r\n    return (\r\n        <button disabled={item.Affordable} onClick={() => item.ClickFun()} className=\"shopBT\" type=\"button\">{item.Name}\r\n            <div className=\"tooltiptext\">\r\n                <div className=\"description\">{item.Title}</div>\r\n                <div className=\"description\">{item.CostText()}</div>\r\n                <div className=\"description\">{item.Description}</div>\r\n            </div>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default function Shop(props) {\r\n\r\n    const [Shop, SetShop] = useState(shopItems)\r\n\r\n    useEffect(() => {\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"shop\">\r\n            <div className=\"shopHeder\">\r\n                Shop\r\n            </div>\r\n\r\n            {Shop.map(shopItem => {\r\n\r\n                let pruchaseFunc = props.pruchaseFuncs.find(pruchaseFunc => pruchaseFunc.Name == shopItem.Name)\r\n                \r\n                if(pruchaseFunc != undefined)\r\n                    shopItem.ClickFun = pruchaseFunc.Func\r\n\r\n                return buyUint(shopItem)\r\n            })}\r\n\r\n            {/* {buyUint(true, false, \"Clicker\", \"Buy a clicker for the progress bar\", \"4x4: 2\", \"It will click [1] a second\")} */}\r\n\r\n            {/* {buyUint(true, false, \"AI\", \"Buy a clicker for the progress bar\", \"4x4: 5\", \"It will click [1] a second\")} */}\r\n\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport Sudoku from './Components/sudoku'\r\nimport NumberInput from './Components/numberInput'\r\nimport Complete from './Components/complete'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from './HelperFunctions/generatorSudoku'\r\nimport { useEffect, useState, useRef } from \"react\"\r\nimport Header from './Components/header'\r\nimport DisplayResources from './Components/resources'\r\nimport { SaveBoard, LocalToArray, LoadResources, SaveResources } from './HelperFunctions/saveValue'\r\nimport { CollectResources } from './HelperFunctions/getResources'\r\nimport Shop from './Components/shop'\r\n// import {Interval, useInterval} from './HelperFunctions/interval'\r\nimport { SolveOne } from './HelperFunctions/solve'\r\n\r\nlet seleNumber = 1\r\n\r\nfunction App() {\r\n\tlet remove = 7\r\n\tlet size = 4\r\n\tlet squares = 2\r\n\r\n\tclass Resource {\r\n\t\tName = \"name\"\r\n\t\tValue = 0\r\n\t\tInterval = 0\r\n\t\tAmountPar = 0\r\n\t\tDisplay = false\r\n\r\n\t\tconstructor(name, value, interval, amountPar, display) {\r\n\t\t\tthis.Name = name\r\n\t\t\tthis.Value = value\r\n\t\t\tthis.Interval = interval\r\n\t\t\tthis.AmountPar = amountPar\r\n\t\t\tthis.Display = display\r\n\t\t}\r\n\t}\r\n\r\n\tlet currencys =\r\n\t\t[\r\n\t\t\tnew Resource(\"4x4\", 0, 0, 0, true),\r\n\t\t\tnew Resource(\"9x9\")\r\n\t\t]\r\n\r\n\tclass Incrementel {\r\n\t\tconstructor(name, interval, amount, callBack, active) {\r\n\t\t\tthis.Name = name\r\n\t\t\tthis.Interval = interval\r\n\t\t\tthis.Amount = amount\r\n\t\t\tthis.CallBack = callBack\r\n\t\t\tthis.Active = active\r\n\t\t}\r\n\t}\r\n\r\n\tlet incrementelsArr = [\r\n\t\tnew Incrementel(\"clicker\", 50, 0.5, clickBar, false),\r\n\t\tnew Incrementel(\"consloe\", 1500, 2, consloeTest, true)\r\n\t]\r\n\r\n\r\n\tconst [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\tconst [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n\tconst [resources, SetResources] = useState(currencys)\r\n\tconst [solved, SetSolved] = useState(false)\r\n\tconst [FillBar, SetFillBar] = useState(0)\r\n\tconst [Amount, SetAmount] = useState(1)\r\n\tconst [Active, SetActive] = useState([incrementelsArr[0].Active, incrementelsArr[1].Active])\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tGetIncrementels()\r\n\r\n\t\tlet savedBoard = localStorage.getItem(\"curBoard\")\r\n\t\tif (savedBoard != null) {\r\n\r\n\t\t\tlet curBoard = LocalToArray(savedBoard)\r\n\t\t\tSetGameBoard(curBoard)\r\n\t\t}\r\n\t\telse {\r\n\t\t\tNewGame(size, squares);\r\n\t\t}\r\n\t\tSetResources(LoadAllResources())\r\n\t}, [])\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [gameBoard])\r\n\r\n\tuseEffect(() => {\r\n\t\tSetSolved(CheckSukoku(size, gameBoard, squares))\r\n\t}, [resources])\r\n\r\n\tfunction GetIncrementels() {\r\n\t\tlet clicker = LoadResources(\"clicker\")\r\n\t\tlet temtActive = Active\r\n\t\ttemtActive[0] = clicker != 0 ? true : false\r\n\r\n\t\tSetActive(temtActive)\r\n\t}\r\n\r\n\tfunction NewGame(size, squares) {\r\n\t\tlet newBoard = MakeSudoku(size, squares)\r\n\t\tnewBoard = RemoveNumbers(newBoard, remove)\r\n\t\tSetGameBoard(newBoard)\r\n\t\tSaveBoard(newBoard, \"curBoard\")\r\n\t}\r\n\r\n\r\n\tfunction consloeTest() {\r\n\t\tconsole.log(\"cool\")\r\n\t}\r\n\tlet incrementel1 = new Incrementel(\"clicker\", 50, 0.5, clickBar, true)\r\n\r\n\r\n\tfunction PurchaseClicker() {\r\n\t\tlet temtActive = Active\r\n\r\n\t\ttemtActive[0] = true\r\n\r\n\t\tSaveResources(\"clicker\",true)\r\n\t\tSetActive(temtActive)\r\n\t}\r\n\r\n\tuseInterval(incrementelsArr[0], Amount, Active[0])\r\n\r\n\tincrementel1.Amount = 1\r\n\r\n\tclass pruchaseFunc {\r\n\t\tconstructor(name, func) {\r\n\t\t\tthis.Name = name\r\n\t\t\tthis.Func = func\r\n\t\t}\r\n\t}\r\n\r\n\tfunction clickBar(barFill) {\r\n\t\tlet tempFill = FillBar + barFill\r\n\r\n\t\tif (tempFill >= 100) {\r\n\t\t\tif (solved) {\r\n\t\t\t\tSetFillBar(100)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tSetFillBar(0)\r\n\t\t\t\tNewSolve(SolveOne(gameBoard))\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tSetFillBar(tempFill)\r\n\t}\r\n\r\n\tlet pruchaseFuncs = [\r\n\t\tnew pruchaseFunc(\"Clicker\", PurchaseClicker)\r\n\t]\r\n\r\n\r\n\r\n\tfunction LoadAllResources() {\r\n\r\n\t\tcurrencys.map((currency, index, currencys) => {\r\n\t\t\tcurrencys[index].Value = LoadResources(currency.Name)\r\n\t\t})\r\n\r\n\t\treturn currencys\r\n\t}\r\n\r\n\tfunction collect(name, value, size, squares) {\r\n\r\n\t\tlet tempResources = resources\r\n\r\n\t\ttempResources.find(resource => resource.Name == name).Value = CollectResources(name, value)\r\n\r\n\t\tSetResources(tempResources)\r\n\t\tNewGame(size, squares)\r\n\t}\r\n\r\n\tfunction handleClick(x, y) {\r\n\t\tif (gameBoard == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[x][y] = String(seleNumber)\r\n\t\tSetGameBoard(tempGameBoard)\r\n\t\tSaveBoard(tempGameBoard, \"curBoard\")\r\n\t}\r\n\r\n\tfunction NewSolve(solve) {\r\n\t\tif (solve == null) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\ttempGameBoard[solve[0]][solve[1]] = String(solve[2])\r\n\t\tSetGameBoard(tempGameBoard)\r\n\t\tSaveBoard(tempGameBoard, \"curBoard\")\r\n\t}\r\n\r\n\tconst handleNumberClick = (number) => {\r\n\t\tseleNumber = number.target.value\r\n\t\tSetSelectedNumber(number.target.value)\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleInput = (e) => {\r\n\t\t\tif (e.key <= size && e.key != 0) {\r\n\t\t\t\tSetSelectedNumber(e.key)\r\n\t\t\t\tseleNumber = e.key\r\n\t\t\t}\r\n\t\t}\r\n\t\tdocument.addEventListener(\"keydown\", handleInput);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleInput);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Header></Header>\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<DisplayResources resources={resources} ></DisplayResources>\r\n\t\t\t\t\t<NumberInput selectedNumber={selectedNumber} size={size} callBack={handleNumberClick} />\r\n\t\t\t\t\t<div className=\"sudoku\">\r\n\t\t\t\t\t\t<Sudoku\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tsquares={squares}\r\n\t\t\t\t\t\t\tcallBack={handleClick}\r\n\t\t\t\t\t\t\tvalue={gameBoard}\r\n\t\t\t\t\t\t></Sudoku>\r\n\t\t\t\t\t\t<Complete\r\n\t\t\t\t\t\t\tsolved={solved}\r\n\t\t\t\t\t\t\tnewGame={NewGame}\r\n\t\t\t\t\t\t\tsquares={squares}\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t\tcollect={collect}\r\n\t\t\t\t\t\t\tclickBar={clickBar}\r\n\t\t\t\t\t\t\tfillbar={FillBar}\r\n\t\t\t\t\t\t></Complete>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Shop resources={resources} pruchaseFuncs={pruchaseFuncs}></Shop>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction useInterval(inc, amount, active) {\r\n\tconst savedCallback = useRef();\r\n\r\n\tuseEffect(() => {\r\n\t\tsavedCallback.current = inc.CallBack;\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tif (active) {\r\n\t\t\tfunction tick() {\r\n\t\t\t\tsavedCallback.current(amount);\r\n\t\t\t}\r\n\r\n\t\t\tlet id = setInterval(tick, inc.Interval);\r\n\t\t\treturn () => clearInterval(id);\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n\r\n\r\nexport default App;","import { SaveResources, LoadResources } from \"./saveValue\";\r\n\r\nfunction CollectResources(key, value){\r\n\r\n    let curValue = LoadResources(key)\r\n    curValue = curValue + value\r\n    SaveResources(key, curValue)\r\n    \r\n    return curValue\r\n}\r\n\r\n\r\nexport{CollectResources}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}