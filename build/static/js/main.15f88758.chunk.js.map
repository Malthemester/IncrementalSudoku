{"version":3,"sources":["sudoku.js","numberInput.js","generatorSudoku.js","App.js","index.js"],"names":["Sudoku","props","useState","board","SetBoard","rows","squ","colGroup","useEffect","i","squares","push","size","tds","j","onClick","callBack","value","RenderInputFild","radioGroup","type","id","name","checked","selectedNumber","onChange","htmlFor","RenderNInput","buttons","className","NumberInput","fillArray","splice","checkRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","length","checkSquare","squareSize","squareX","squareY","MakeSudoku","square","randomNumber","randomIndexNumber","numArry","newBoard","Array","fill","map","pickerArr","Math","floor","random","pickerIndex","notFull","sort","arr1","arr2","RemovePencelmark","CheckSukoku","rowID","culumnID","includes","indexOf","curSquareY","curSquareX","seleNumber","App","SetSelectedNumber","gameBoard","SetGameBoard","tempGameBoard","handleInput","e","key","document","addEventListener","removeEventListener","target","x","y","Number","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.15f88758.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(<td key={`tdK${i}${j}`} onClick={\r\n\t\t\t\t\t() => props.callBack(i, j)}>\r\n\t\t\t\t\t{props.value[i][j]}\r\n\t\t\t\t</td>)\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table>\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n","function fillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction checkRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = fillArray(size)\r\n    let checkColumn = fillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0 ? true : false\r\n}\r\n\r\nfunction checkSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = fillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    for (let i = 0; i < size; i++) {\r\n        if (!checkRowAndCulumn(i, board, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!checkSquare(board, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction SolveBoard({ board }) {\r\n\r\n}\r\n\r\nexport default function MakeSudoku(size, square) {\r\n    let numArry = fillArray(size)\r\n    let newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n    let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n    let pickerIndex = []\r\n\r\n    let index, randomNumber, randomIndexNumber\r\n\r\n    let notFull = true\r\n    while (notFull) {\r\n\r\n        pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n\r\n        index = 0\r\n        if (pickerArr.length > 0) {\r\n\r\n            if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n\r\n                randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n\r\n                newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n            }\r\n            pickerArr.splice(index, 1)\r\n            pickerIndex.splice(index, 1)\r\n\r\n        }\r\n\r\n        if (pickerArr.length <= 0) {\r\n            notFull = false\r\n        }\r\n    }\r\n\r\n    if (!CheckSukoku(size, newBoard, square)) {\r\n        return MakeSudoku(size, square)\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import './App.css';\nimport Sudoku from './sudoku'\nimport NumberInput from './numberInput'\nimport MakeSudoku from './generatorSudoku'\nimport { react, useEffect, useState } from \"react\"\n\nlet seleNumber = 1\n\nfunction App() {\n  const [selectedNumber, SetSelectedNumber] = useState(seleNumber)\n\n  const [size, SetSize] = useState(9)\n  const [squares, SetSquares] = useState(3)\n  const [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\n  \n  let solveBoard\n\n  useEffect(() => {\n    let tempGameBoard = []\n    for (let i = 0; i < size; i++) {\n      tempGameBoard.push([])\n      for (let j = 0; j < size; j++) {\n        tempGameBoard[i].push(null)\n      }\n    }\n    solveBoard = tempGameBoard\n\n    let newBoard = MakeSudoku(size, squares)\n\n    SetGameBoard(newBoard)\n  }, [])\n\n  function handleClick(x, y) {\n\n    if (gameBoard == null) {\n      return\n    }\n\n    let tempGameBoard = [...gameBoard]\n    tempGameBoard[x][y] = Number(seleNumber)\n    SetGameBoard(tempGameBoard)\n  }\n\n  const handleNumberClick = (number) => {\n    seleNumber = number.target.value\n    SetSelectedNumber(number.target.value)\n  }\n\n  const newBoard = (newBoard) =>{\n      SetGameBoard(newBoard)\n  }\n\n  useEffect(() => {\n    const handleInput = (e) => {\n      if  (e.key <= size && e.key != 0){\n        SetSelectedNumber(e.key)\n        seleNumber = e.key\n      }\n\n    }\n    document.addEventListener(\"keydown\", handleInput);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleInput);\n    };\n  }, []);\n  \n  \n  return (\n    <div>\n      <NumberInput selectedNumber={selectedNumber}  size={size} callBack={handleNumberClick} />\n      <p>\n        <Sudoku\n          size={size}\n          squares={squares}\n          callBack={handleClick}\n          value={gameBoard}\n        ></Sudoku>\n      </p>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}